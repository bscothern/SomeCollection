//
// SomeCollectionConformances.swift
//
// Auto Generated
// MakeSomeCollectionLib 1.0.0
// 2020-01-12
//

extension AnyBidirectionalCollection: SequenceOfBool where Element == Bool {}
extension AnyBidirectionalCollection: CollectionOfBool where Element == Bool {}
extension AnyBidirectionalCollection: SequenceOfOptionalBool where Element == Bool? {}
extension AnyBidirectionalCollection: CollectionOfOptionalBool where Element == Bool? {}
extension AnyBidirectionalCollection: SequenceOfCharacter where Element == Character {}
extension AnyBidirectionalCollection: CollectionOfCharacter where Element == Character {}
extension AnyBidirectionalCollection: SequenceOfOptionalCharacter where Element == Character? {}
extension AnyBidirectionalCollection: CollectionOfOptionalCharacter where Element == Character? {}
extension AnyBidirectionalCollection: SequenceOfDouble where Element == Double {}
extension AnyBidirectionalCollection: CollectionOfDouble where Element == Double {}
extension AnyBidirectionalCollection: SequenceOfOptionalDouble where Element == Double? {}
extension AnyBidirectionalCollection: CollectionOfOptionalDouble where Element == Double? {}
extension AnyBidirectionalCollection: SequenceOfError where Element == Error {}
extension AnyBidirectionalCollection: CollectionOfError where Element == Error {}
extension AnyBidirectionalCollection: SequenceOfOptionalError where Element == Error? {}
extension AnyBidirectionalCollection: CollectionOfOptionalError where Element == Error? {}
extension AnyBidirectionalCollection: SequenceOfFloat where Element == Float {}
extension AnyBidirectionalCollection: CollectionOfFloat where Element == Float {}
extension AnyBidirectionalCollection: SequenceOfOptionalFloat where Element == Float? {}
extension AnyBidirectionalCollection: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension AnyBidirectionalCollection: SequenceOfFloat80 where Element == Float80 {}
extension AnyBidirectionalCollection: CollectionOfFloat80 where Element == Float80 {}
extension AnyBidirectionalCollection: SequenceOfOptionalFloat80 where Element == Float80? {}
extension AnyBidirectionalCollection: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension AnyBidirectionalCollection: SequenceOfInt where Element == Int {}
extension AnyBidirectionalCollection: CollectionOfInt where Element == Int {}
extension AnyBidirectionalCollection: SequenceOfOptionalInt where Element == Int? {}
extension AnyBidirectionalCollection: CollectionOfOptionalInt where Element == Int? {}
extension AnyBidirectionalCollection: SequenceOfInt16 where Element == Int16 {}
extension AnyBidirectionalCollection: CollectionOfInt16 where Element == Int16 {}
extension AnyBidirectionalCollection: SequenceOfOptionalInt16 where Element == Int16? {}
extension AnyBidirectionalCollection: CollectionOfOptionalInt16 where Element == Int16? {}
extension AnyBidirectionalCollection: SequenceOfInt32 where Element == Int32 {}
extension AnyBidirectionalCollection: CollectionOfInt32 where Element == Int32 {}
extension AnyBidirectionalCollection: SequenceOfOptionalInt32 where Element == Int32? {}
extension AnyBidirectionalCollection: CollectionOfOptionalInt32 where Element == Int32? {}
extension AnyBidirectionalCollection: SequenceOfInt64 where Element == Int64 {}
extension AnyBidirectionalCollection: CollectionOfInt64 where Element == Int64 {}
extension AnyBidirectionalCollection: SequenceOfOptionalInt64 where Element == Int64? {}
extension AnyBidirectionalCollection: CollectionOfOptionalInt64 where Element == Int64? {}
extension AnyBidirectionalCollection: SequenceOfInt8 where Element == Int8 {}
extension AnyBidirectionalCollection: CollectionOfInt8 where Element == Int8 {}
extension AnyBidirectionalCollection: SequenceOfOptionalInt8 where Element == Int8? {}
extension AnyBidirectionalCollection: CollectionOfOptionalInt8 where Element == Int8? {}
extension AnyBidirectionalCollection: SequenceOfString where Element == String {}
extension AnyBidirectionalCollection: CollectionOfString where Element == String {}
extension AnyBidirectionalCollection: SequenceOfOptionalString where Element == String? {}
extension AnyBidirectionalCollection: CollectionOfOptionalString where Element == String? {}
extension AnyBidirectionalCollection: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnyBidirectionalCollection: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnyBidirectionalCollection: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnyBidirectionalCollection: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnyBidirectionalCollection: SequenceOfSubstring where Element == Substring {}
extension AnyBidirectionalCollection: CollectionOfSubstring where Element == Substring {}
extension AnyBidirectionalCollection: SequenceOfOptionalSubstring where Element == Substring? {}
extension AnyBidirectionalCollection: CollectionOfOptionalSubstring where Element == Substring? {}
extension AnyBidirectionalCollection: SequenceOfUInt where Element == UInt {}
extension AnyBidirectionalCollection: CollectionOfUInt where Element == UInt {}
extension AnyBidirectionalCollection: SequenceOfOptionalUInt where Element == UInt? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUInt where Element == UInt? {}
extension AnyBidirectionalCollection: SequenceOfUInt16 where Element == UInt16 {}
extension AnyBidirectionalCollection: CollectionOfUInt16 where Element == UInt16 {}
extension AnyBidirectionalCollection: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension AnyBidirectionalCollection: SequenceOfUInt32 where Element == UInt32 {}
extension AnyBidirectionalCollection: CollectionOfUInt32 where Element == UInt32 {}
extension AnyBidirectionalCollection: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension AnyBidirectionalCollection: SequenceOfUInt64 where Element == UInt64 {}
extension AnyBidirectionalCollection: CollectionOfUInt64 where Element == UInt64 {}
extension AnyBidirectionalCollection: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension AnyBidirectionalCollection: SequenceOfUInt8 where Element == UInt8 {}
extension AnyBidirectionalCollection: CollectionOfUInt8 where Element == UInt8 {}
extension AnyBidirectionalCollection: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension AnyBidirectionalCollection: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnyBidirectionalCollection: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnyBidirectionalCollection: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnyBidirectionalCollection: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnyBidirectionalCollection: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnyBidirectionalCollection: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnyBidirectionalCollection: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnyBidirectionalCollection: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnyBidirectionalCollection: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension AnyBidirectionalCollection: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension AnyCollection: SequenceOfBool where Element == Bool {}
extension AnyCollection: CollectionOfBool where Element == Bool {}
extension AnyCollection: SequenceOfOptionalBool where Element == Bool? {}
extension AnyCollection: CollectionOfOptionalBool where Element == Bool? {}
extension AnyCollection: SequenceOfCharacter where Element == Character {}
extension AnyCollection: CollectionOfCharacter where Element == Character {}
extension AnyCollection: SequenceOfOptionalCharacter where Element == Character? {}
extension AnyCollection: CollectionOfOptionalCharacter where Element == Character? {}
extension AnyCollection: SequenceOfDouble where Element == Double {}
extension AnyCollection: CollectionOfDouble where Element == Double {}
extension AnyCollection: SequenceOfOptionalDouble where Element == Double? {}
extension AnyCollection: CollectionOfOptionalDouble where Element == Double? {}
extension AnyCollection: SequenceOfError where Element == Error {}
extension AnyCollection: CollectionOfError where Element == Error {}
extension AnyCollection: SequenceOfOptionalError where Element == Error? {}
extension AnyCollection: CollectionOfOptionalError where Element == Error? {}
extension AnyCollection: SequenceOfFloat where Element == Float {}
extension AnyCollection: CollectionOfFloat where Element == Float {}
extension AnyCollection: SequenceOfOptionalFloat where Element == Float? {}
extension AnyCollection: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension AnyCollection: SequenceOfFloat80 where Element == Float80 {}
extension AnyCollection: CollectionOfFloat80 where Element == Float80 {}
extension AnyCollection: SequenceOfOptionalFloat80 where Element == Float80? {}
extension AnyCollection: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension AnyCollection: SequenceOfInt where Element == Int {}
extension AnyCollection: CollectionOfInt where Element == Int {}
extension AnyCollection: SequenceOfOptionalInt where Element == Int? {}
extension AnyCollection: CollectionOfOptionalInt where Element == Int? {}
extension AnyCollection: SequenceOfInt16 where Element == Int16 {}
extension AnyCollection: CollectionOfInt16 where Element == Int16 {}
extension AnyCollection: SequenceOfOptionalInt16 where Element == Int16? {}
extension AnyCollection: CollectionOfOptionalInt16 where Element == Int16? {}
extension AnyCollection: SequenceOfInt32 where Element == Int32 {}
extension AnyCollection: CollectionOfInt32 where Element == Int32 {}
extension AnyCollection: SequenceOfOptionalInt32 where Element == Int32? {}
extension AnyCollection: CollectionOfOptionalInt32 where Element == Int32? {}
extension AnyCollection: SequenceOfInt64 where Element == Int64 {}
extension AnyCollection: CollectionOfInt64 where Element == Int64 {}
extension AnyCollection: SequenceOfOptionalInt64 where Element == Int64? {}
extension AnyCollection: CollectionOfOptionalInt64 where Element == Int64? {}
extension AnyCollection: SequenceOfInt8 where Element == Int8 {}
extension AnyCollection: CollectionOfInt8 where Element == Int8 {}
extension AnyCollection: SequenceOfOptionalInt8 where Element == Int8? {}
extension AnyCollection: CollectionOfOptionalInt8 where Element == Int8? {}
extension AnyCollection: SequenceOfString where Element == String {}
extension AnyCollection: CollectionOfString where Element == String {}
extension AnyCollection: SequenceOfOptionalString where Element == String? {}
extension AnyCollection: CollectionOfOptionalString where Element == String? {}
extension AnyCollection: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnyCollection: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnyCollection: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnyCollection: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnyCollection: SequenceOfSubstring where Element == Substring {}
extension AnyCollection: CollectionOfSubstring where Element == Substring {}
extension AnyCollection: SequenceOfOptionalSubstring where Element == Substring? {}
extension AnyCollection: CollectionOfOptionalSubstring where Element == Substring? {}
extension AnyCollection: SequenceOfUInt where Element == UInt {}
extension AnyCollection: CollectionOfUInt where Element == UInt {}
extension AnyCollection: SequenceOfOptionalUInt where Element == UInt? {}
extension AnyCollection: CollectionOfOptionalUInt where Element == UInt? {}
extension AnyCollection: SequenceOfUInt16 where Element == UInt16 {}
extension AnyCollection: CollectionOfUInt16 where Element == UInt16 {}
extension AnyCollection: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension AnyCollection: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension AnyCollection: SequenceOfUInt32 where Element == UInt32 {}
extension AnyCollection: CollectionOfUInt32 where Element == UInt32 {}
extension AnyCollection: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension AnyCollection: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension AnyCollection: SequenceOfUInt64 where Element == UInt64 {}
extension AnyCollection: CollectionOfUInt64 where Element == UInt64 {}
extension AnyCollection: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension AnyCollection: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension AnyCollection: SequenceOfUInt8 where Element == UInt8 {}
extension AnyCollection: CollectionOfUInt8 where Element == UInt8 {}
extension AnyCollection: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension AnyCollection: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension AnyCollection: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnyCollection: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnyCollection: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnyCollection: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnyCollection: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnyCollection: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnyCollection: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnyCollection: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnyCollection: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnyCollection: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnyCollection: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension AnyCollection: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension Array: SequenceOfBool where Element == Bool {}
extension Array: CollectionOfBool where Element == Bool {}
extension Array: SequenceOfOptionalBool where Element == Bool? {}
extension Array: CollectionOfOptionalBool where Element == Bool? {}
extension Array: SequenceOfCharacter where Element == Character {}
extension Array: CollectionOfCharacter where Element == Character {}
extension Array: SequenceOfOptionalCharacter where Element == Character? {}
extension Array: CollectionOfOptionalCharacter where Element == Character? {}
extension Array: SequenceOfDouble where Element == Double {}
extension Array: CollectionOfDouble where Element == Double {}
extension Array: SequenceOfOptionalDouble where Element == Double? {}
extension Array: CollectionOfOptionalDouble where Element == Double? {}
extension Array: SequenceOfError where Element == Error {}
extension Array: CollectionOfError where Element == Error {}
extension Array: SequenceOfOptionalError where Element == Error? {}
extension Array: CollectionOfOptionalError where Element == Error? {}
extension Array: SequenceOfFloat where Element == Float {}
extension Array: CollectionOfFloat where Element == Float {}
extension Array: SequenceOfOptionalFloat where Element == Float? {}
extension Array: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension Array: SequenceOfFloat80 where Element == Float80 {}
extension Array: CollectionOfFloat80 where Element == Float80 {}
extension Array: SequenceOfOptionalFloat80 where Element == Float80? {}
extension Array: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension Array: SequenceOfInt where Element == Int {}
extension Array: CollectionOfInt where Element == Int {}
extension Array: SequenceOfOptionalInt where Element == Int? {}
extension Array: CollectionOfOptionalInt where Element == Int? {}
extension Array: SequenceOfInt16 where Element == Int16 {}
extension Array: CollectionOfInt16 where Element == Int16 {}
extension Array: SequenceOfOptionalInt16 where Element == Int16? {}
extension Array: CollectionOfOptionalInt16 where Element == Int16? {}
extension Array: SequenceOfInt32 where Element == Int32 {}
extension Array: CollectionOfInt32 where Element == Int32 {}
extension Array: SequenceOfOptionalInt32 where Element == Int32? {}
extension Array: CollectionOfOptionalInt32 where Element == Int32? {}
extension Array: SequenceOfInt64 where Element == Int64 {}
extension Array: CollectionOfInt64 where Element == Int64 {}
extension Array: SequenceOfOptionalInt64 where Element == Int64? {}
extension Array: CollectionOfOptionalInt64 where Element == Int64? {}
extension Array: SequenceOfInt8 where Element == Int8 {}
extension Array: CollectionOfInt8 where Element == Int8 {}
extension Array: SequenceOfOptionalInt8 where Element == Int8? {}
extension Array: CollectionOfOptionalInt8 where Element == Int8? {}
extension Array: SequenceOfString where Element == String {}
extension Array: CollectionOfString where Element == String {}
extension Array: SequenceOfOptionalString where Element == String? {}
extension Array: CollectionOfOptionalString where Element == String? {}
extension Array: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Array: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Array: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Array: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Array: SequenceOfSubstring where Element == Substring {}
extension Array: CollectionOfSubstring where Element == Substring {}
extension Array: SequenceOfOptionalSubstring where Element == Substring? {}
extension Array: CollectionOfOptionalSubstring where Element == Substring? {}
extension Array: SequenceOfUInt where Element == UInt {}
extension Array: CollectionOfUInt where Element == UInt {}
extension Array: SequenceOfOptionalUInt where Element == UInt? {}
extension Array: CollectionOfOptionalUInt where Element == UInt? {}
extension Array: SequenceOfUInt16 where Element == UInt16 {}
extension Array: CollectionOfUInt16 where Element == UInt16 {}
extension Array: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension Array: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension Array: SequenceOfUInt32 where Element == UInt32 {}
extension Array: CollectionOfUInt32 where Element == UInt32 {}
extension Array: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension Array: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension Array: SequenceOfUInt64 where Element == UInt64 {}
extension Array: CollectionOfUInt64 where Element == UInt64 {}
extension Array: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension Array: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension Array: SequenceOfUInt8 where Element == UInt8 {}
extension Array: CollectionOfUInt8 where Element == UInt8 {}
extension Array: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension Array: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension Array: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Array: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Array: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Array: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Array: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Array: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Array: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Array: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Array: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension Array: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension Array: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension Array: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension ArraySlice: SequenceOfBool where Element == Bool {}
extension ArraySlice: CollectionOfBool where Element == Bool {}
extension ArraySlice: SequenceOfOptionalBool where Element == Bool? {}
extension ArraySlice: CollectionOfOptionalBool where Element == Bool? {}
extension ArraySlice: SequenceOfCharacter where Element == Character {}
extension ArraySlice: CollectionOfCharacter where Element == Character {}
extension ArraySlice: SequenceOfOptionalCharacter where Element == Character? {}
extension ArraySlice: CollectionOfOptionalCharacter where Element == Character? {}
extension ArraySlice: SequenceOfDouble where Element == Double {}
extension ArraySlice: CollectionOfDouble where Element == Double {}
extension ArraySlice: SequenceOfOptionalDouble where Element == Double? {}
extension ArraySlice: CollectionOfOptionalDouble where Element == Double? {}
extension ArraySlice: SequenceOfError where Element == Error {}
extension ArraySlice: CollectionOfError where Element == Error {}
extension ArraySlice: SequenceOfOptionalError where Element == Error? {}
extension ArraySlice: CollectionOfOptionalError where Element == Error? {}
extension ArraySlice: SequenceOfFloat where Element == Float {}
extension ArraySlice: CollectionOfFloat where Element == Float {}
extension ArraySlice: SequenceOfOptionalFloat where Element == Float? {}
extension ArraySlice: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension ArraySlice: SequenceOfFloat80 where Element == Float80 {}
extension ArraySlice: CollectionOfFloat80 where Element == Float80 {}
extension ArraySlice: SequenceOfOptionalFloat80 where Element == Float80? {}
extension ArraySlice: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension ArraySlice: SequenceOfInt where Element == Int {}
extension ArraySlice: CollectionOfInt where Element == Int {}
extension ArraySlice: SequenceOfOptionalInt where Element == Int? {}
extension ArraySlice: CollectionOfOptionalInt where Element == Int? {}
extension ArraySlice: SequenceOfInt16 where Element == Int16 {}
extension ArraySlice: CollectionOfInt16 where Element == Int16 {}
extension ArraySlice: SequenceOfOptionalInt16 where Element == Int16? {}
extension ArraySlice: CollectionOfOptionalInt16 where Element == Int16? {}
extension ArraySlice: SequenceOfInt32 where Element == Int32 {}
extension ArraySlice: CollectionOfInt32 where Element == Int32 {}
extension ArraySlice: SequenceOfOptionalInt32 where Element == Int32? {}
extension ArraySlice: CollectionOfOptionalInt32 where Element == Int32? {}
extension ArraySlice: SequenceOfInt64 where Element == Int64 {}
extension ArraySlice: CollectionOfInt64 where Element == Int64 {}
extension ArraySlice: SequenceOfOptionalInt64 where Element == Int64? {}
extension ArraySlice: CollectionOfOptionalInt64 where Element == Int64? {}
extension ArraySlice: SequenceOfInt8 where Element == Int8 {}
extension ArraySlice: CollectionOfInt8 where Element == Int8 {}
extension ArraySlice: SequenceOfOptionalInt8 where Element == Int8? {}
extension ArraySlice: CollectionOfOptionalInt8 where Element == Int8? {}
extension ArraySlice: SequenceOfString where Element == String {}
extension ArraySlice: CollectionOfString where Element == String {}
extension ArraySlice: SequenceOfOptionalString where Element == String? {}
extension ArraySlice: CollectionOfOptionalString where Element == String? {}
extension ArraySlice: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ArraySlice: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ArraySlice: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ArraySlice: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ArraySlice: SequenceOfSubstring where Element == Substring {}
extension ArraySlice: CollectionOfSubstring where Element == Substring {}
extension ArraySlice: SequenceOfOptionalSubstring where Element == Substring? {}
extension ArraySlice: CollectionOfOptionalSubstring where Element == Substring? {}
extension ArraySlice: SequenceOfUInt where Element == UInt {}
extension ArraySlice: CollectionOfUInt where Element == UInt {}
extension ArraySlice: SequenceOfOptionalUInt where Element == UInt? {}
extension ArraySlice: CollectionOfOptionalUInt where Element == UInt? {}
extension ArraySlice: SequenceOfUInt16 where Element == UInt16 {}
extension ArraySlice: CollectionOfUInt16 where Element == UInt16 {}
extension ArraySlice: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension ArraySlice: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension ArraySlice: SequenceOfUInt32 where Element == UInt32 {}
extension ArraySlice: CollectionOfUInt32 where Element == UInt32 {}
extension ArraySlice: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension ArraySlice: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension ArraySlice: SequenceOfUInt64 where Element == UInt64 {}
extension ArraySlice: CollectionOfUInt64 where Element == UInt64 {}
extension ArraySlice: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension ArraySlice: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension ArraySlice: SequenceOfUInt8 where Element == UInt8 {}
extension ArraySlice: CollectionOfUInt8 where Element == UInt8 {}
extension ArraySlice: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension ArraySlice: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension ArraySlice: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ArraySlice: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ArraySlice: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ArraySlice: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ArraySlice: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ArraySlice: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ArraySlice: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ArraySlice: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ArraySlice: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension ArraySlice: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension ArraySlice: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension ArraySlice: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension ClosedRange: SequenceOfInt where Bound == Int {}
extension ClosedRange: CollectionOfInt where Bound == Int {}
extension ClosedRange: SequenceOfInt16 where Bound == Int16 {}
extension ClosedRange: CollectionOfInt16 where Bound == Int16 {}
extension ClosedRange: SequenceOfInt32 where Bound == Int32 {}
extension ClosedRange: CollectionOfInt32 where Bound == Int32 {}
extension ClosedRange: SequenceOfInt64 where Bound == Int64 {}
extension ClosedRange: CollectionOfInt64 where Bound == Int64 {}
extension ClosedRange: SequenceOfInt8 where Bound == Int8 {}
extension ClosedRange: CollectionOfInt8 where Bound == Int8 {}
extension ClosedRange: SequenceOfUInt where Bound == UInt {}
extension ClosedRange: CollectionOfUInt where Bound == UInt {}
extension ClosedRange: SequenceOfUInt16 where Bound == UInt16 {}
extension ClosedRange: CollectionOfUInt16 where Bound == UInt16 {}
extension ClosedRange: SequenceOfUInt32 where Bound == UInt32 {}
extension ClosedRange: CollectionOfUInt32 where Bound == UInt32 {}
extension ClosedRange: SequenceOfUInt64 where Bound == UInt64 {}
extension ClosedRange: CollectionOfUInt64 where Bound == UInt64 {}
extension ClosedRange: SequenceOfUInt8 where Bound == UInt8 {}
extension ClosedRange: CollectionOfUInt8 where Bound == UInt8 {}

extension CollectionOfOne: SequenceOfBool where Element == Bool {}
extension CollectionOfOne: CollectionOfBool where Element == Bool {}
extension CollectionOfOne: SequenceOfOptionalBool where Element == Bool? {}
extension CollectionOfOne: CollectionOfOptionalBool where Element == Bool? {}
extension CollectionOfOne: SequenceOfCharacter where Element == Character {}
extension CollectionOfOne: CollectionOfCharacter where Element == Character {}
extension CollectionOfOne: SequenceOfOptionalCharacter where Element == Character? {}
extension CollectionOfOne: CollectionOfOptionalCharacter where Element == Character? {}
extension CollectionOfOne: SequenceOfDouble where Element == Double {}
extension CollectionOfOne: CollectionOfDouble where Element == Double {}
extension CollectionOfOne: SequenceOfOptionalDouble where Element == Double? {}
extension CollectionOfOne: CollectionOfOptionalDouble where Element == Double? {}
extension CollectionOfOne: SequenceOfError where Element == Error {}
extension CollectionOfOne: CollectionOfError where Element == Error {}
extension CollectionOfOne: SequenceOfOptionalError where Element == Error? {}
extension CollectionOfOne: CollectionOfOptionalError where Element == Error? {}
extension CollectionOfOne: SequenceOfFloat where Element == Float {}
extension CollectionOfOne: CollectionOfFloat where Element == Float {}
extension CollectionOfOne: SequenceOfOptionalFloat where Element == Float? {}
extension CollectionOfOne: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension CollectionOfOne: SequenceOfFloat80 where Element == Float80 {}
extension CollectionOfOne: CollectionOfFloat80 where Element == Float80 {}
extension CollectionOfOne: SequenceOfOptionalFloat80 where Element == Float80? {}
extension CollectionOfOne: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension CollectionOfOne: SequenceOfInt where Element == Int {}
extension CollectionOfOne: CollectionOfInt where Element == Int {}
extension CollectionOfOne: SequenceOfOptionalInt where Element == Int? {}
extension CollectionOfOne: CollectionOfOptionalInt where Element == Int? {}
extension CollectionOfOne: SequenceOfInt16 where Element == Int16 {}
extension CollectionOfOne: CollectionOfInt16 where Element == Int16 {}
extension CollectionOfOne: SequenceOfOptionalInt16 where Element == Int16? {}
extension CollectionOfOne: CollectionOfOptionalInt16 where Element == Int16? {}
extension CollectionOfOne: SequenceOfInt32 where Element == Int32 {}
extension CollectionOfOne: CollectionOfInt32 where Element == Int32 {}
extension CollectionOfOne: SequenceOfOptionalInt32 where Element == Int32? {}
extension CollectionOfOne: CollectionOfOptionalInt32 where Element == Int32? {}
extension CollectionOfOne: SequenceOfInt64 where Element == Int64 {}
extension CollectionOfOne: CollectionOfInt64 where Element == Int64 {}
extension CollectionOfOne: SequenceOfOptionalInt64 where Element == Int64? {}
extension CollectionOfOne: CollectionOfOptionalInt64 where Element == Int64? {}
extension CollectionOfOne: SequenceOfInt8 where Element == Int8 {}
extension CollectionOfOne: CollectionOfInt8 where Element == Int8 {}
extension CollectionOfOne: SequenceOfOptionalInt8 where Element == Int8? {}
extension CollectionOfOne: CollectionOfOptionalInt8 where Element == Int8? {}
extension CollectionOfOne: SequenceOfString where Element == String {}
extension CollectionOfOne: CollectionOfString where Element == String {}
extension CollectionOfOne: SequenceOfOptionalString where Element == String? {}
extension CollectionOfOne: CollectionOfOptionalString where Element == String? {}
extension CollectionOfOne: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension CollectionOfOne: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension CollectionOfOne: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension CollectionOfOne: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension CollectionOfOne: SequenceOfSubstring where Element == Substring {}
extension CollectionOfOne: CollectionOfSubstring where Element == Substring {}
extension CollectionOfOne: SequenceOfOptionalSubstring where Element == Substring? {}
extension CollectionOfOne: CollectionOfOptionalSubstring where Element == Substring? {}
extension CollectionOfOne: SequenceOfUInt where Element == UInt {}
extension CollectionOfOne: CollectionOfUInt where Element == UInt {}
extension CollectionOfOne: SequenceOfOptionalUInt where Element == UInt? {}
extension CollectionOfOne: CollectionOfOptionalUInt where Element == UInt? {}
extension CollectionOfOne: SequenceOfUInt16 where Element == UInt16 {}
extension CollectionOfOne: CollectionOfUInt16 where Element == UInt16 {}
extension CollectionOfOne: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension CollectionOfOne: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension CollectionOfOne: SequenceOfUInt32 where Element == UInt32 {}
extension CollectionOfOne: CollectionOfUInt32 where Element == UInt32 {}
extension CollectionOfOne: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension CollectionOfOne: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension CollectionOfOne: SequenceOfUInt64 where Element == UInt64 {}
extension CollectionOfOne: CollectionOfUInt64 where Element == UInt64 {}
extension CollectionOfOne: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension CollectionOfOne: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension CollectionOfOne: SequenceOfUInt8 where Element == UInt8 {}
extension CollectionOfOne: CollectionOfUInt8 where Element == UInt8 {}
extension CollectionOfOne: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension CollectionOfOne: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension CollectionOfOne: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension CollectionOfOne: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension CollectionOfOne: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension CollectionOfOne: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension CollectionOfOne: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension CollectionOfOne: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension CollectionOfOne: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension CollectionOfOne: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension CollectionOfOne: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension CollectionOfOne: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension CollectionOfOne: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension CollectionOfOne: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension ContiguousArray: SequenceOfBool where Element == Bool {}
extension ContiguousArray: CollectionOfBool where Element == Bool {}
extension ContiguousArray: SequenceOfOptionalBool where Element == Bool? {}
extension ContiguousArray: CollectionOfOptionalBool where Element == Bool? {}
extension ContiguousArray: SequenceOfCharacter where Element == Character {}
extension ContiguousArray: CollectionOfCharacter where Element == Character {}
extension ContiguousArray: SequenceOfOptionalCharacter where Element == Character? {}
extension ContiguousArray: CollectionOfOptionalCharacter where Element == Character? {}
extension ContiguousArray: SequenceOfDouble where Element == Double {}
extension ContiguousArray: CollectionOfDouble where Element == Double {}
extension ContiguousArray: SequenceOfOptionalDouble where Element == Double? {}
extension ContiguousArray: CollectionOfOptionalDouble where Element == Double? {}
extension ContiguousArray: SequenceOfError where Element == Error {}
extension ContiguousArray: CollectionOfError where Element == Error {}
extension ContiguousArray: SequenceOfOptionalError where Element == Error? {}
extension ContiguousArray: CollectionOfOptionalError where Element == Error? {}
extension ContiguousArray: SequenceOfFloat where Element == Float {}
extension ContiguousArray: CollectionOfFloat where Element == Float {}
extension ContiguousArray: SequenceOfOptionalFloat where Element == Float? {}
extension ContiguousArray: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension ContiguousArray: SequenceOfFloat80 where Element == Float80 {}
extension ContiguousArray: CollectionOfFloat80 where Element == Float80 {}
extension ContiguousArray: SequenceOfOptionalFloat80 where Element == Float80? {}
extension ContiguousArray: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension ContiguousArray: SequenceOfInt where Element == Int {}
extension ContiguousArray: CollectionOfInt where Element == Int {}
extension ContiguousArray: SequenceOfOptionalInt where Element == Int? {}
extension ContiguousArray: CollectionOfOptionalInt where Element == Int? {}
extension ContiguousArray: SequenceOfInt16 where Element == Int16 {}
extension ContiguousArray: CollectionOfInt16 where Element == Int16 {}
extension ContiguousArray: SequenceOfOptionalInt16 where Element == Int16? {}
extension ContiguousArray: CollectionOfOptionalInt16 where Element == Int16? {}
extension ContiguousArray: SequenceOfInt32 where Element == Int32 {}
extension ContiguousArray: CollectionOfInt32 where Element == Int32 {}
extension ContiguousArray: SequenceOfOptionalInt32 where Element == Int32? {}
extension ContiguousArray: CollectionOfOptionalInt32 where Element == Int32? {}
extension ContiguousArray: SequenceOfInt64 where Element == Int64 {}
extension ContiguousArray: CollectionOfInt64 where Element == Int64 {}
extension ContiguousArray: SequenceOfOptionalInt64 where Element == Int64? {}
extension ContiguousArray: CollectionOfOptionalInt64 where Element == Int64? {}
extension ContiguousArray: SequenceOfInt8 where Element == Int8 {}
extension ContiguousArray: CollectionOfInt8 where Element == Int8 {}
extension ContiguousArray: SequenceOfOptionalInt8 where Element == Int8? {}
extension ContiguousArray: CollectionOfOptionalInt8 where Element == Int8? {}
extension ContiguousArray: SequenceOfString where Element == String {}
extension ContiguousArray: CollectionOfString where Element == String {}
extension ContiguousArray: SequenceOfOptionalString where Element == String? {}
extension ContiguousArray: CollectionOfOptionalString where Element == String? {}
extension ContiguousArray: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ContiguousArray: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ContiguousArray: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ContiguousArray: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ContiguousArray: SequenceOfSubstring where Element == Substring {}
extension ContiguousArray: CollectionOfSubstring where Element == Substring {}
extension ContiguousArray: SequenceOfOptionalSubstring where Element == Substring? {}
extension ContiguousArray: CollectionOfOptionalSubstring where Element == Substring? {}
extension ContiguousArray: SequenceOfUInt where Element == UInt {}
extension ContiguousArray: CollectionOfUInt where Element == UInt {}
extension ContiguousArray: SequenceOfOptionalUInt where Element == UInt? {}
extension ContiguousArray: CollectionOfOptionalUInt where Element == UInt? {}
extension ContiguousArray: SequenceOfUInt16 where Element == UInt16 {}
extension ContiguousArray: CollectionOfUInt16 where Element == UInt16 {}
extension ContiguousArray: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension ContiguousArray: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension ContiguousArray: SequenceOfUInt32 where Element == UInt32 {}
extension ContiguousArray: CollectionOfUInt32 where Element == UInt32 {}
extension ContiguousArray: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension ContiguousArray: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension ContiguousArray: SequenceOfUInt64 where Element == UInt64 {}
extension ContiguousArray: CollectionOfUInt64 where Element == UInt64 {}
extension ContiguousArray: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension ContiguousArray: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension ContiguousArray: SequenceOfUInt8 where Element == UInt8 {}
extension ContiguousArray: CollectionOfUInt8 where Element == UInt8 {}
extension ContiguousArray: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension ContiguousArray: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension ContiguousArray: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ContiguousArray: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ContiguousArray: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ContiguousArray: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ContiguousArray: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ContiguousArray: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ContiguousArray: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ContiguousArray: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ContiguousArray: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension ContiguousArray: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension ContiguousArray: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension ContiguousArray: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension DefaultIndices: SequenceOfCharacter where Element == Character {}
extension DefaultIndices: CollectionOfCharacter where Element == Character {}
extension DefaultIndices: SequenceOfDouble where Element == Double {}
extension DefaultIndices: CollectionOfDouble where Element == Double {}
extension DefaultIndices: SequenceOfFloat where Element == Float {}
extension DefaultIndices: CollectionOfFloat where Element == Float {}
#if os(macOS)
extension DefaultIndices: SequenceOfFloat80 where Element == Float80 {}
extension DefaultIndices: CollectionOfFloat80 where Element == Float80 {}
#endif
extension DefaultIndices: SequenceOfInt where Element == Int {}
extension DefaultIndices: CollectionOfInt where Element == Int {}
extension DefaultIndices: SequenceOfInt16 where Element == Int16 {}
extension DefaultIndices: CollectionOfInt16 where Element == Int16 {}
extension DefaultIndices: SequenceOfInt32 where Element == Int32 {}
extension DefaultIndices: CollectionOfInt32 where Element == Int32 {}
extension DefaultIndices: SequenceOfInt64 where Element == Int64 {}
extension DefaultIndices: CollectionOfInt64 where Element == Int64 {}
extension DefaultIndices: SequenceOfInt8 where Element == Int8 {}
extension DefaultIndices: CollectionOfInt8 where Element == Int8 {}
extension DefaultIndices: SequenceOfString where Element == String {}
extension DefaultIndices: CollectionOfString where Element == String {}
extension DefaultIndices: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension DefaultIndices: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension DefaultIndices: SequenceOfSubstring where Element == Substring {}
extension DefaultIndices: CollectionOfSubstring where Element == Substring {}
extension DefaultIndices: SequenceOfUInt where Element == UInt {}
extension DefaultIndices: CollectionOfUInt where Element == UInt {}
extension DefaultIndices: SequenceOfUInt16 where Element == UInt16 {}
extension DefaultIndices: CollectionOfUInt16 where Element == UInt16 {}
extension DefaultIndices: SequenceOfUInt32 where Element == UInt32 {}
extension DefaultIndices: CollectionOfUInt32 where Element == UInt32 {}
extension DefaultIndices: SequenceOfUInt64 where Element == UInt64 {}
extension DefaultIndices: CollectionOfUInt64 where Element == UInt64 {}
extension DefaultIndices: SequenceOfUInt8 where Element == UInt8 {}
extension DefaultIndices: CollectionOfUInt8 where Element == UInt8 {}
extension DefaultIndices: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension DefaultIndices: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension DefaultIndices: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension DefaultIndices: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension DefaultIndices: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension DefaultIndices: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}

extension Dictionary.Keys: SequenceOfBool where Element == Bool {}
extension Dictionary.Keys: CollectionOfBool where Element == Bool {}
extension Dictionary.Keys: SequenceOfOptionalBool where Element == Bool? {}
extension Dictionary.Keys: CollectionOfOptionalBool where Element == Bool? {}
extension Dictionary.Keys: SequenceOfCharacter where Element == Character {}
extension Dictionary.Keys: CollectionOfCharacter where Element == Character {}
extension Dictionary.Keys: SequenceOfOptionalCharacter where Element == Character? {}
extension Dictionary.Keys: CollectionOfOptionalCharacter where Element == Character? {}
extension Dictionary.Keys: SequenceOfDouble where Element == Double {}
extension Dictionary.Keys: CollectionOfDouble where Element == Double {}
extension Dictionary.Keys: SequenceOfOptionalDouble where Element == Double? {}
extension Dictionary.Keys: CollectionOfOptionalDouble where Element == Double? {}
extension Dictionary.Keys: SequenceOfFloat where Element == Float {}
extension Dictionary.Keys: CollectionOfFloat where Element == Float {}
extension Dictionary.Keys: SequenceOfOptionalFloat where Element == Float? {}
extension Dictionary.Keys: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension Dictionary.Keys: SequenceOfFloat80 where Element == Float80 {}
extension Dictionary.Keys: CollectionOfFloat80 where Element == Float80 {}
extension Dictionary.Keys: SequenceOfOptionalFloat80 where Element == Float80? {}
extension Dictionary.Keys: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension Dictionary.Keys: SequenceOfInt where Element == Int {}
extension Dictionary.Keys: CollectionOfInt where Element == Int {}
extension Dictionary.Keys: SequenceOfOptionalInt where Element == Int? {}
extension Dictionary.Keys: CollectionOfOptionalInt where Element == Int? {}
extension Dictionary.Keys: SequenceOfInt16 where Element == Int16 {}
extension Dictionary.Keys: CollectionOfInt16 where Element == Int16 {}
extension Dictionary.Keys: SequenceOfOptionalInt16 where Element == Int16? {}
extension Dictionary.Keys: CollectionOfOptionalInt16 where Element == Int16? {}
extension Dictionary.Keys: SequenceOfInt32 where Element == Int32 {}
extension Dictionary.Keys: CollectionOfInt32 where Element == Int32 {}
extension Dictionary.Keys: SequenceOfOptionalInt32 where Element == Int32? {}
extension Dictionary.Keys: CollectionOfOptionalInt32 where Element == Int32? {}
extension Dictionary.Keys: SequenceOfInt64 where Element == Int64 {}
extension Dictionary.Keys: CollectionOfInt64 where Element == Int64 {}
extension Dictionary.Keys: SequenceOfOptionalInt64 where Element == Int64? {}
extension Dictionary.Keys: CollectionOfOptionalInt64 where Element == Int64? {}
extension Dictionary.Keys: SequenceOfInt8 where Element == Int8 {}
extension Dictionary.Keys: CollectionOfInt8 where Element == Int8 {}
extension Dictionary.Keys: SequenceOfOptionalInt8 where Element == Int8? {}
extension Dictionary.Keys: CollectionOfOptionalInt8 where Element == Int8? {}
extension Dictionary.Keys: SequenceOfString where Element == String {}
extension Dictionary.Keys: CollectionOfString where Element == String {}
extension Dictionary.Keys: SequenceOfOptionalString where Element == String? {}
extension Dictionary.Keys: CollectionOfOptionalString where Element == String? {}
extension Dictionary.Keys: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Dictionary.Keys: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Dictionary.Keys: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Dictionary.Keys: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Dictionary.Keys: SequenceOfSubstring where Element == Substring {}
extension Dictionary.Keys: CollectionOfSubstring where Element == Substring {}
extension Dictionary.Keys: SequenceOfOptionalSubstring where Element == Substring? {}
extension Dictionary.Keys: CollectionOfOptionalSubstring where Element == Substring? {}
extension Dictionary.Keys: SequenceOfUInt where Element == UInt {}
extension Dictionary.Keys: CollectionOfUInt where Element == UInt {}
extension Dictionary.Keys: SequenceOfOptionalUInt where Element == UInt? {}
extension Dictionary.Keys: CollectionOfOptionalUInt where Element == UInt? {}
extension Dictionary.Keys: SequenceOfUInt16 where Element == UInt16 {}
extension Dictionary.Keys: CollectionOfUInt16 where Element == UInt16 {}
extension Dictionary.Keys: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension Dictionary.Keys: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension Dictionary.Keys: SequenceOfUInt32 where Element == UInt32 {}
extension Dictionary.Keys: CollectionOfUInt32 where Element == UInt32 {}
extension Dictionary.Keys: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension Dictionary.Keys: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension Dictionary.Keys: SequenceOfUInt64 where Element == UInt64 {}
extension Dictionary.Keys: CollectionOfUInt64 where Element == UInt64 {}
extension Dictionary.Keys: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension Dictionary.Keys: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension Dictionary.Keys: SequenceOfUInt8 where Element == UInt8 {}
extension Dictionary.Keys: CollectionOfUInt8 where Element == UInt8 {}
extension Dictionary.Keys: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension Dictionary.Keys: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension Dictionary.Keys: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Dictionary.Keys: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Dictionary.Keys: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Dictionary.Keys: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Dictionary.Keys: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Dictionary.Keys: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Dictionary.Keys: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Dictionary.Keys: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Dictionary.Keys: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension Dictionary.Keys: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension Dictionary.Keys: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension Dictionary.Keys: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension Dictionary.Values: SequenceOfBool where Element == Bool {}
extension Dictionary.Values: CollectionOfBool where Element == Bool {}
extension Dictionary.Values: SequenceOfOptionalBool where Element == Bool? {}
extension Dictionary.Values: CollectionOfOptionalBool where Element == Bool? {}
extension Dictionary.Values: SequenceOfCharacter where Element == Character {}
extension Dictionary.Values: CollectionOfCharacter where Element == Character {}
extension Dictionary.Values: SequenceOfOptionalCharacter where Element == Character? {}
extension Dictionary.Values: CollectionOfOptionalCharacter where Element == Character? {}
extension Dictionary.Values: SequenceOfDouble where Element == Double {}
extension Dictionary.Values: CollectionOfDouble where Element == Double {}
extension Dictionary.Values: SequenceOfOptionalDouble where Element == Double? {}
extension Dictionary.Values: CollectionOfOptionalDouble where Element == Double? {}
extension Dictionary.Values: SequenceOfError where Element == Error {}
extension Dictionary.Values: CollectionOfError where Element == Error {}
extension Dictionary.Values: SequenceOfOptionalError where Element == Error? {}
extension Dictionary.Values: CollectionOfOptionalError where Element == Error? {}
extension Dictionary.Values: SequenceOfFloat where Element == Float {}
extension Dictionary.Values: CollectionOfFloat where Element == Float {}
extension Dictionary.Values: SequenceOfOptionalFloat where Element == Float? {}
extension Dictionary.Values: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension Dictionary.Values: SequenceOfFloat80 where Element == Float80 {}
extension Dictionary.Values: CollectionOfFloat80 where Element == Float80 {}
extension Dictionary.Values: SequenceOfOptionalFloat80 where Element == Float80? {}
extension Dictionary.Values: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension Dictionary.Values: SequenceOfInt where Element == Int {}
extension Dictionary.Values: CollectionOfInt where Element == Int {}
extension Dictionary.Values: SequenceOfOptionalInt where Element == Int? {}
extension Dictionary.Values: CollectionOfOptionalInt where Element == Int? {}
extension Dictionary.Values: SequenceOfInt16 where Element == Int16 {}
extension Dictionary.Values: CollectionOfInt16 where Element == Int16 {}
extension Dictionary.Values: SequenceOfOptionalInt16 where Element == Int16? {}
extension Dictionary.Values: CollectionOfOptionalInt16 where Element == Int16? {}
extension Dictionary.Values: SequenceOfInt32 where Element == Int32 {}
extension Dictionary.Values: CollectionOfInt32 where Element == Int32 {}
extension Dictionary.Values: SequenceOfOptionalInt32 where Element == Int32? {}
extension Dictionary.Values: CollectionOfOptionalInt32 where Element == Int32? {}
extension Dictionary.Values: SequenceOfInt64 where Element == Int64 {}
extension Dictionary.Values: CollectionOfInt64 where Element == Int64 {}
extension Dictionary.Values: SequenceOfOptionalInt64 where Element == Int64? {}
extension Dictionary.Values: CollectionOfOptionalInt64 where Element == Int64? {}
extension Dictionary.Values: SequenceOfInt8 where Element == Int8 {}
extension Dictionary.Values: CollectionOfInt8 where Element == Int8 {}
extension Dictionary.Values: SequenceOfOptionalInt8 where Element == Int8? {}
extension Dictionary.Values: CollectionOfOptionalInt8 where Element == Int8? {}
extension Dictionary.Values: SequenceOfString where Element == String {}
extension Dictionary.Values: CollectionOfString where Element == String {}
extension Dictionary.Values: SequenceOfOptionalString where Element == String? {}
extension Dictionary.Values: CollectionOfOptionalString where Element == String? {}
extension Dictionary.Values: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Dictionary.Values: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Dictionary.Values: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Dictionary.Values: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Dictionary.Values: SequenceOfSubstring where Element == Substring {}
extension Dictionary.Values: CollectionOfSubstring where Element == Substring {}
extension Dictionary.Values: SequenceOfOptionalSubstring where Element == Substring? {}
extension Dictionary.Values: CollectionOfOptionalSubstring where Element == Substring? {}
extension Dictionary.Values: SequenceOfUInt where Element == UInt {}
extension Dictionary.Values: CollectionOfUInt where Element == UInt {}
extension Dictionary.Values: SequenceOfOptionalUInt where Element == UInt? {}
extension Dictionary.Values: CollectionOfOptionalUInt where Element == UInt? {}
extension Dictionary.Values: SequenceOfUInt16 where Element == UInt16 {}
extension Dictionary.Values: CollectionOfUInt16 where Element == UInt16 {}
extension Dictionary.Values: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension Dictionary.Values: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension Dictionary.Values: SequenceOfUInt32 where Element == UInt32 {}
extension Dictionary.Values: CollectionOfUInt32 where Element == UInt32 {}
extension Dictionary.Values: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension Dictionary.Values: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension Dictionary.Values: SequenceOfUInt64 where Element == UInt64 {}
extension Dictionary.Values: CollectionOfUInt64 where Element == UInt64 {}
extension Dictionary.Values: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension Dictionary.Values: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension Dictionary.Values: SequenceOfUInt8 where Element == UInt8 {}
extension Dictionary.Values: CollectionOfUInt8 where Element == UInt8 {}
extension Dictionary.Values: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension Dictionary.Values: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension Dictionary.Values: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Dictionary.Values: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Dictionary.Values: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Dictionary.Values: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Dictionary.Values: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Dictionary.Values: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Dictionary.Values: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Dictionary.Values: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Dictionary.Values: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension Dictionary.Values: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension Dictionary.Values: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension Dictionary.Values: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension EmptyCollection: SequenceOfBool where Element == Bool {}
extension EmptyCollection: CollectionOfBool where Element == Bool {}
extension EmptyCollection: SequenceOfOptionalBool where Element == Bool? {}
extension EmptyCollection: CollectionOfOptionalBool where Element == Bool? {}
extension EmptyCollection: SequenceOfCharacter where Element == Character {}
extension EmptyCollection: CollectionOfCharacter where Element == Character {}
extension EmptyCollection: SequenceOfOptionalCharacter where Element == Character? {}
extension EmptyCollection: CollectionOfOptionalCharacter where Element == Character? {}
extension EmptyCollection: SequenceOfDouble where Element == Double {}
extension EmptyCollection: CollectionOfDouble where Element == Double {}
extension EmptyCollection: SequenceOfOptionalDouble where Element == Double? {}
extension EmptyCollection: CollectionOfOptionalDouble where Element == Double? {}
extension EmptyCollection: SequenceOfError where Element == Error {}
extension EmptyCollection: CollectionOfError where Element == Error {}
extension EmptyCollection: SequenceOfOptionalError where Element == Error? {}
extension EmptyCollection: CollectionOfOptionalError where Element == Error? {}
extension EmptyCollection: SequenceOfFloat where Element == Float {}
extension EmptyCollection: CollectionOfFloat where Element == Float {}
extension EmptyCollection: SequenceOfOptionalFloat where Element == Float? {}
extension EmptyCollection: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension EmptyCollection: SequenceOfFloat80 where Element == Float80 {}
extension EmptyCollection: CollectionOfFloat80 where Element == Float80 {}
extension EmptyCollection: SequenceOfOptionalFloat80 where Element == Float80? {}
extension EmptyCollection: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension EmptyCollection: SequenceOfInt where Element == Int {}
extension EmptyCollection: CollectionOfInt where Element == Int {}
extension EmptyCollection: SequenceOfOptionalInt where Element == Int? {}
extension EmptyCollection: CollectionOfOptionalInt where Element == Int? {}
extension EmptyCollection: SequenceOfInt16 where Element == Int16 {}
extension EmptyCollection: CollectionOfInt16 where Element == Int16 {}
extension EmptyCollection: SequenceOfOptionalInt16 where Element == Int16? {}
extension EmptyCollection: CollectionOfOptionalInt16 where Element == Int16? {}
extension EmptyCollection: SequenceOfInt32 where Element == Int32 {}
extension EmptyCollection: CollectionOfInt32 where Element == Int32 {}
extension EmptyCollection: SequenceOfOptionalInt32 where Element == Int32? {}
extension EmptyCollection: CollectionOfOptionalInt32 where Element == Int32? {}
extension EmptyCollection: SequenceOfInt64 where Element == Int64 {}
extension EmptyCollection: CollectionOfInt64 where Element == Int64 {}
extension EmptyCollection: SequenceOfOptionalInt64 where Element == Int64? {}
extension EmptyCollection: CollectionOfOptionalInt64 where Element == Int64? {}
extension EmptyCollection: SequenceOfInt8 where Element == Int8 {}
extension EmptyCollection: CollectionOfInt8 where Element == Int8 {}
extension EmptyCollection: SequenceOfOptionalInt8 where Element == Int8? {}
extension EmptyCollection: CollectionOfOptionalInt8 where Element == Int8? {}
extension EmptyCollection: SequenceOfString where Element == String {}
extension EmptyCollection: CollectionOfString where Element == String {}
extension EmptyCollection: SequenceOfOptionalString where Element == String? {}
extension EmptyCollection: CollectionOfOptionalString where Element == String? {}
extension EmptyCollection: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension EmptyCollection: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension EmptyCollection: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension EmptyCollection: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension EmptyCollection: SequenceOfSubstring where Element == Substring {}
extension EmptyCollection: CollectionOfSubstring where Element == Substring {}
extension EmptyCollection: SequenceOfOptionalSubstring where Element == Substring? {}
extension EmptyCollection: CollectionOfOptionalSubstring where Element == Substring? {}
extension EmptyCollection: SequenceOfUInt where Element == UInt {}
extension EmptyCollection: CollectionOfUInt where Element == UInt {}
extension EmptyCollection: SequenceOfOptionalUInt where Element == UInt? {}
extension EmptyCollection: CollectionOfOptionalUInt where Element == UInt? {}
extension EmptyCollection: SequenceOfUInt16 where Element == UInt16 {}
extension EmptyCollection: CollectionOfUInt16 where Element == UInt16 {}
extension EmptyCollection: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension EmptyCollection: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension EmptyCollection: SequenceOfUInt32 where Element == UInt32 {}
extension EmptyCollection: CollectionOfUInt32 where Element == UInt32 {}
extension EmptyCollection: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension EmptyCollection: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension EmptyCollection: SequenceOfUInt64 where Element == UInt64 {}
extension EmptyCollection: CollectionOfUInt64 where Element == UInt64 {}
extension EmptyCollection: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension EmptyCollection: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension EmptyCollection: SequenceOfUInt8 where Element == UInt8 {}
extension EmptyCollection: CollectionOfUInt8 where Element == UInt8 {}
extension EmptyCollection: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension EmptyCollection: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension EmptyCollection: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension EmptyCollection: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension EmptyCollection: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension EmptyCollection: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension EmptyCollection: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension EmptyCollection: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension EmptyCollection: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension EmptyCollection: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension EmptyCollection: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension EmptyCollection: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension EmptyCollection: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension EmptyCollection: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension ReversedCollection: SequenceOfBool where Element == Bool {}
extension ReversedCollection: CollectionOfBool where Element == Bool {}
extension ReversedCollection: SequenceOfOptionalBool where Element == Bool? {}
extension ReversedCollection: CollectionOfOptionalBool where Element == Bool? {}
extension ReversedCollection: SequenceOfCharacter where Element == Character {}
extension ReversedCollection: CollectionOfCharacter where Element == Character {}
extension ReversedCollection: SequenceOfOptionalCharacter where Element == Character? {}
extension ReversedCollection: CollectionOfOptionalCharacter where Element == Character? {}
extension ReversedCollection: SequenceOfDouble where Element == Double {}
extension ReversedCollection: CollectionOfDouble where Element == Double {}
extension ReversedCollection: SequenceOfOptionalDouble where Element == Double? {}
extension ReversedCollection: CollectionOfOptionalDouble where Element == Double? {}
extension ReversedCollection: SequenceOfError where Element == Error {}
extension ReversedCollection: CollectionOfError where Element == Error {}
extension ReversedCollection: SequenceOfOptionalError where Element == Error? {}
extension ReversedCollection: CollectionOfOptionalError where Element == Error? {}
extension ReversedCollection: SequenceOfFloat where Element == Float {}
extension ReversedCollection: CollectionOfFloat where Element == Float {}
extension ReversedCollection: SequenceOfOptionalFloat where Element == Float? {}
extension ReversedCollection: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension ReversedCollection: SequenceOfFloat80 where Element == Float80 {}
extension ReversedCollection: CollectionOfFloat80 where Element == Float80 {}
extension ReversedCollection: SequenceOfOptionalFloat80 where Element == Float80? {}
extension ReversedCollection: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension ReversedCollection: SequenceOfInt where Element == Int {}
extension ReversedCollection: CollectionOfInt where Element == Int {}
extension ReversedCollection: SequenceOfOptionalInt where Element == Int? {}
extension ReversedCollection: CollectionOfOptionalInt where Element == Int? {}
extension ReversedCollection: SequenceOfInt16 where Element == Int16 {}
extension ReversedCollection: CollectionOfInt16 where Element == Int16 {}
extension ReversedCollection: SequenceOfOptionalInt16 where Element == Int16? {}
extension ReversedCollection: CollectionOfOptionalInt16 where Element == Int16? {}
extension ReversedCollection: SequenceOfInt32 where Element == Int32 {}
extension ReversedCollection: CollectionOfInt32 where Element == Int32 {}
extension ReversedCollection: SequenceOfOptionalInt32 where Element == Int32? {}
extension ReversedCollection: CollectionOfOptionalInt32 where Element == Int32? {}
extension ReversedCollection: SequenceOfInt64 where Element == Int64 {}
extension ReversedCollection: CollectionOfInt64 where Element == Int64 {}
extension ReversedCollection: SequenceOfOptionalInt64 where Element == Int64? {}
extension ReversedCollection: CollectionOfOptionalInt64 where Element == Int64? {}
extension ReversedCollection: SequenceOfInt8 where Element == Int8 {}
extension ReversedCollection: CollectionOfInt8 where Element == Int8 {}
extension ReversedCollection: SequenceOfOptionalInt8 where Element == Int8? {}
extension ReversedCollection: CollectionOfOptionalInt8 where Element == Int8? {}
extension ReversedCollection: SequenceOfString where Element == String {}
extension ReversedCollection: CollectionOfString where Element == String {}
extension ReversedCollection: SequenceOfOptionalString where Element == String? {}
extension ReversedCollection: CollectionOfOptionalString where Element == String? {}
extension ReversedCollection: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ReversedCollection: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ReversedCollection: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ReversedCollection: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ReversedCollection: SequenceOfSubstring where Element == Substring {}
extension ReversedCollection: CollectionOfSubstring where Element == Substring {}
extension ReversedCollection: SequenceOfOptionalSubstring where Element == Substring? {}
extension ReversedCollection: CollectionOfOptionalSubstring where Element == Substring? {}
extension ReversedCollection: SequenceOfUInt where Element == UInt {}
extension ReversedCollection: CollectionOfUInt where Element == UInt {}
extension ReversedCollection: SequenceOfOptionalUInt where Element == UInt? {}
extension ReversedCollection: CollectionOfOptionalUInt where Element == UInt? {}
extension ReversedCollection: SequenceOfUInt16 where Element == UInt16 {}
extension ReversedCollection: CollectionOfUInt16 where Element == UInt16 {}
extension ReversedCollection: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension ReversedCollection: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension ReversedCollection: SequenceOfUInt32 where Element == UInt32 {}
extension ReversedCollection: CollectionOfUInt32 where Element == UInt32 {}
extension ReversedCollection: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension ReversedCollection: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension ReversedCollection: SequenceOfUInt64 where Element == UInt64 {}
extension ReversedCollection: CollectionOfUInt64 where Element == UInt64 {}
extension ReversedCollection: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension ReversedCollection: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension ReversedCollection: SequenceOfUInt8 where Element == UInt8 {}
extension ReversedCollection: CollectionOfUInt8 where Element == UInt8 {}
extension ReversedCollection: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension ReversedCollection: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension ReversedCollection: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ReversedCollection: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ReversedCollection: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ReversedCollection: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ReversedCollection: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ReversedCollection: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ReversedCollection: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ReversedCollection: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ReversedCollection: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension ReversedCollection: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension ReversedCollection: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension ReversedCollection: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension Set: SequenceOfBool where Element == Bool {}
extension Set: CollectionOfBool where Element == Bool {}
extension Set: SequenceOfOptionalBool where Element == Bool? {}
extension Set: CollectionOfOptionalBool where Element == Bool? {}
extension Set: SequenceOfCharacter where Element == Character {}
extension Set: CollectionOfCharacter where Element == Character {}
extension Set: SequenceOfOptionalCharacter where Element == Character? {}
extension Set: CollectionOfOptionalCharacter where Element == Character? {}
extension Set: SequenceOfDouble where Element == Double {}
extension Set: CollectionOfDouble where Element == Double {}
extension Set: SequenceOfOptionalDouble where Element == Double? {}
extension Set: CollectionOfOptionalDouble where Element == Double? {}
extension Set: SequenceOfFloat where Element == Float {}
extension Set: CollectionOfFloat where Element == Float {}
extension Set: SequenceOfOptionalFloat where Element == Float? {}
extension Set: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension Set: SequenceOfFloat80 where Element == Float80 {}
extension Set: CollectionOfFloat80 where Element == Float80 {}
extension Set: SequenceOfOptionalFloat80 where Element == Float80? {}
extension Set: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension Set: SequenceOfInt where Element == Int {}
extension Set: CollectionOfInt where Element == Int {}
extension Set: SequenceOfOptionalInt where Element == Int? {}
extension Set: CollectionOfOptionalInt where Element == Int? {}
extension Set: SequenceOfInt16 where Element == Int16 {}
extension Set: CollectionOfInt16 where Element == Int16 {}
extension Set: SequenceOfOptionalInt16 where Element == Int16? {}
extension Set: CollectionOfOptionalInt16 where Element == Int16? {}
extension Set: SequenceOfInt32 where Element == Int32 {}
extension Set: CollectionOfInt32 where Element == Int32 {}
extension Set: SequenceOfOptionalInt32 where Element == Int32? {}
extension Set: CollectionOfOptionalInt32 where Element == Int32? {}
extension Set: SequenceOfInt64 where Element == Int64 {}
extension Set: CollectionOfInt64 where Element == Int64 {}
extension Set: SequenceOfOptionalInt64 where Element == Int64? {}
extension Set: CollectionOfOptionalInt64 where Element == Int64? {}
extension Set: SequenceOfInt8 where Element == Int8 {}
extension Set: CollectionOfInt8 where Element == Int8 {}
extension Set: SequenceOfOptionalInt8 where Element == Int8? {}
extension Set: CollectionOfOptionalInt8 where Element == Int8? {}
extension Set: SequenceOfString where Element == String {}
extension Set: CollectionOfString where Element == String {}
extension Set: SequenceOfOptionalString where Element == String? {}
extension Set: CollectionOfOptionalString where Element == String? {}
extension Set: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Set: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Set: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Set: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Set: SequenceOfSubstring where Element == Substring {}
extension Set: CollectionOfSubstring where Element == Substring {}
extension Set: SequenceOfOptionalSubstring where Element == Substring? {}
extension Set: CollectionOfOptionalSubstring where Element == Substring? {}
extension Set: SequenceOfUInt where Element == UInt {}
extension Set: CollectionOfUInt where Element == UInt {}
extension Set: SequenceOfOptionalUInt where Element == UInt? {}
extension Set: CollectionOfOptionalUInt where Element == UInt? {}
extension Set: SequenceOfUInt16 where Element == UInt16 {}
extension Set: CollectionOfUInt16 where Element == UInt16 {}
extension Set: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension Set: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension Set: SequenceOfUInt32 where Element == UInt32 {}
extension Set: CollectionOfUInt32 where Element == UInt32 {}
extension Set: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension Set: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension Set: SequenceOfUInt64 where Element == UInt64 {}
extension Set: CollectionOfUInt64 where Element == UInt64 {}
extension Set: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension Set: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension Set: SequenceOfUInt8 where Element == UInt8 {}
extension Set: CollectionOfUInt8 where Element == UInt8 {}
extension Set: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension Set: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension Set: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Set: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Set: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Set: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Set: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Set: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Set: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Set: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Set: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension Set: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension Set: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension Set: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension Slice: SequenceOfBool where Element == Bool {}
extension Slice: CollectionOfBool where Element == Bool {}
extension Slice: SequenceOfOptionalBool where Element == Bool? {}
extension Slice: CollectionOfOptionalBool where Element == Bool? {}
extension Slice: SequenceOfCharacter where Element == Character {}
extension Slice: CollectionOfCharacter where Element == Character {}
extension Slice: SequenceOfOptionalCharacter where Element == Character? {}
extension Slice: CollectionOfOptionalCharacter where Element == Character? {}
extension Slice: SequenceOfDouble where Element == Double {}
extension Slice: CollectionOfDouble where Element == Double {}
extension Slice: SequenceOfOptionalDouble where Element == Double? {}
extension Slice: CollectionOfOptionalDouble where Element == Double? {}
extension Slice: SequenceOfError where Element == Error {}
extension Slice: CollectionOfError where Element == Error {}
extension Slice: SequenceOfOptionalError where Element == Error? {}
extension Slice: CollectionOfOptionalError where Element == Error? {}
extension Slice: SequenceOfFloat where Element == Float {}
extension Slice: CollectionOfFloat where Element == Float {}
extension Slice: SequenceOfOptionalFloat where Element == Float? {}
extension Slice: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension Slice: SequenceOfFloat80 where Element == Float80 {}
extension Slice: CollectionOfFloat80 where Element == Float80 {}
extension Slice: SequenceOfOptionalFloat80 where Element == Float80? {}
extension Slice: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension Slice: SequenceOfInt where Element == Int {}
extension Slice: CollectionOfInt where Element == Int {}
extension Slice: SequenceOfOptionalInt where Element == Int? {}
extension Slice: CollectionOfOptionalInt where Element == Int? {}
extension Slice: SequenceOfInt16 where Element == Int16 {}
extension Slice: CollectionOfInt16 where Element == Int16 {}
extension Slice: SequenceOfOptionalInt16 where Element == Int16? {}
extension Slice: CollectionOfOptionalInt16 where Element == Int16? {}
extension Slice: SequenceOfInt32 where Element == Int32 {}
extension Slice: CollectionOfInt32 where Element == Int32 {}
extension Slice: SequenceOfOptionalInt32 where Element == Int32? {}
extension Slice: CollectionOfOptionalInt32 where Element == Int32? {}
extension Slice: SequenceOfInt64 where Element == Int64 {}
extension Slice: CollectionOfInt64 where Element == Int64 {}
extension Slice: SequenceOfOptionalInt64 where Element == Int64? {}
extension Slice: CollectionOfOptionalInt64 where Element == Int64? {}
extension Slice: SequenceOfInt8 where Element == Int8 {}
extension Slice: CollectionOfInt8 where Element == Int8 {}
extension Slice: SequenceOfOptionalInt8 where Element == Int8? {}
extension Slice: CollectionOfOptionalInt8 where Element == Int8? {}
extension Slice: SequenceOfString where Element == String {}
extension Slice: CollectionOfString where Element == String {}
extension Slice: SequenceOfOptionalString where Element == String? {}
extension Slice: CollectionOfOptionalString where Element == String? {}
extension Slice: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Slice: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension Slice: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Slice: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension Slice: SequenceOfSubstring where Element == Substring {}
extension Slice: CollectionOfSubstring where Element == Substring {}
extension Slice: SequenceOfOptionalSubstring where Element == Substring? {}
extension Slice: CollectionOfOptionalSubstring where Element == Substring? {}
extension Slice: SequenceOfUInt where Element == UInt {}
extension Slice: CollectionOfUInt where Element == UInt {}
extension Slice: SequenceOfOptionalUInt where Element == UInt? {}
extension Slice: CollectionOfOptionalUInt where Element == UInt? {}
extension Slice: SequenceOfUInt16 where Element == UInt16 {}
extension Slice: CollectionOfUInt16 where Element == UInt16 {}
extension Slice: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension Slice: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension Slice: SequenceOfUInt32 where Element == UInt32 {}
extension Slice: CollectionOfUInt32 where Element == UInt32 {}
extension Slice: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension Slice: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension Slice: SequenceOfUInt64 where Element == UInt64 {}
extension Slice: CollectionOfUInt64 where Element == UInt64 {}
extension Slice: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension Slice: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension Slice: SequenceOfUInt8 where Element == UInt8 {}
extension Slice: CollectionOfUInt8 where Element == UInt8 {}
extension Slice: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension Slice: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension Slice: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Slice: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension Slice: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Slice: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension Slice: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Slice: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension Slice: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Slice: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension Slice: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension Slice: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension Slice: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension Slice: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension String: SequenceOfCharacter {}
extension String: CollectionOfCharacter {}

extension String.UTF16View: SequenceOfUTF16CodeUnit {}
extension String.UTF16View: CollectionOfUTF16CodeUnit {}

extension String.UTF8View: SequenceOfUTF8CodeUnit {}
extension String.UTF8View: CollectionOfUTF8CodeUnit {}

extension String.UnicodeScalarView: SequenceOfUnicodeScalar {}
extension String.UnicodeScalarView: CollectionOfUnicodeScalar {}

extension Substring.UTF16View: SequenceOfStringUTF16ViewElement {}
extension Substring.UTF16View: CollectionOfStringUTF16ViewElement {}

extension Substring.UnicodeScalarView: SequenceOfUnicodeScalar {}
extension Substring.UnicodeScalarView: CollectionOfUnicodeScalar {}

extension UnsafeMutableBufferPointer: SequenceOfBool where Element == Bool {}
extension UnsafeMutableBufferPointer: CollectionOfBool where Element == Bool {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalBool where Element == Bool? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalBool where Element == Bool? {}
extension UnsafeMutableBufferPointer: SequenceOfCharacter where Element == Character {}
extension UnsafeMutableBufferPointer: CollectionOfCharacter where Element == Character {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalCharacter where Element == Character? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalCharacter where Element == Character? {}
extension UnsafeMutableBufferPointer: SequenceOfDouble where Element == Double {}
extension UnsafeMutableBufferPointer: CollectionOfDouble where Element == Double {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalDouble where Element == Double? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalDouble where Element == Double? {}
extension UnsafeMutableBufferPointer: SequenceOfError where Element == Error {}
extension UnsafeMutableBufferPointer: CollectionOfError where Element == Error {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalError where Element == Error? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalError where Element == Error? {}
extension UnsafeMutableBufferPointer: SequenceOfFloat where Element == Float {}
extension UnsafeMutableBufferPointer: CollectionOfFloat where Element == Float {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalFloat where Element == Float? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension UnsafeMutableBufferPointer: SequenceOfFloat80 where Element == Float80 {}
extension UnsafeMutableBufferPointer: CollectionOfFloat80 where Element == Float80 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalFloat80 where Element == Float80? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalFloat80 where Element == Float80? {}
#endif
extension UnsafeMutableBufferPointer: SequenceOfInt where Element == Int {}
extension UnsafeMutableBufferPointer: CollectionOfInt where Element == Int {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalInt where Element == Int? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalInt where Element == Int? {}
extension UnsafeMutableBufferPointer: SequenceOfInt16 where Element == Int16 {}
extension UnsafeMutableBufferPointer: CollectionOfInt16 where Element == Int16 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalInt16 where Element == Int16? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalInt16 where Element == Int16? {}
extension UnsafeMutableBufferPointer: SequenceOfInt32 where Element == Int32 {}
extension UnsafeMutableBufferPointer: CollectionOfInt32 where Element == Int32 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalInt32 where Element == Int32? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalInt32 where Element == Int32? {}
extension UnsafeMutableBufferPointer: SequenceOfInt64 where Element == Int64 {}
extension UnsafeMutableBufferPointer: CollectionOfInt64 where Element == Int64 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalInt64 where Element == Int64? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalInt64 where Element == Int64? {}
extension UnsafeMutableBufferPointer: SequenceOfInt8 where Element == Int8 {}
extension UnsafeMutableBufferPointer: CollectionOfInt8 where Element == Int8 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalInt8 where Element == Int8? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalInt8 where Element == Int8? {}
extension UnsafeMutableBufferPointer: SequenceOfString where Element == String {}
extension UnsafeMutableBufferPointer: CollectionOfString where Element == String {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalString where Element == String? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalString where Element == String? {}
extension UnsafeMutableBufferPointer: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension UnsafeMutableBufferPointer: CollectionOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension UnsafeMutableBufferPointer: SequenceOfSubstring where Element == Substring {}
extension UnsafeMutableBufferPointer: CollectionOfSubstring where Element == Substring {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalSubstring where Element == Substring? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalSubstring where Element == Substring? {}
extension UnsafeMutableBufferPointer: SequenceOfUInt where Element == UInt {}
extension UnsafeMutableBufferPointer: CollectionOfUInt where Element == UInt {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUInt where Element == UInt? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUInt where Element == UInt? {}
extension UnsafeMutableBufferPointer: SequenceOfUInt16 where Element == UInt16 {}
extension UnsafeMutableBufferPointer: CollectionOfUInt16 where Element == UInt16 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUInt16 where Element == UInt16? {}
extension UnsafeMutableBufferPointer: SequenceOfUInt32 where Element == UInt32 {}
extension UnsafeMutableBufferPointer: CollectionOfUInt32 where Element == UInt32 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUInt32 where Element == UInt32? {}
extension UnsafeMutableBufferPointer: SequenceOfUInt64 where Element == UInt64 {}
extension UnsafeMutableBufferPointer: CollectionOfUInt64 where Element == UInt64 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUInt64 where Element == UInt64? {}
extension UnsafeMutableBufferPointer: SequenceOfUInt8 where Element == UInt8 {}
extension UnsafeMutableBufferPointer: CollectionOfUInt8 where Element == UInt8 {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUInt8 where Element == UInt8? {}
extension UnsafeMutableBufferPointer: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension UnsafeMutableBufferPointer: CollectionOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension UnsafeMutableBufferPointer: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension UnsafeMutableBufferPointer: CollectionOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension UnsafeMutableBufferPointer: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension UnsafeMutableBufferPointer: CollectionOfUnicodeScalar where Element == Unicode.Scalar {}
extension UnsafeMutableBufferPointer: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension UnsafeMutableBufferPointer: CollectionOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension UnsafeMutableRawBufferPointer: SequenceOfUInt8 {}
extension UnsafeMutableRawBufferPointer: CollectionOfUInt8 {}

extension AnyIterator: SequenceOfBool where Element == Bool {}
extension AnyIterator: SequenceOfOptionalBool where Element == Bool? {}
extension AnyIterator: SequenceOfCharacter where Element == Character {}
extension AnyIterator: SequenceOfOptionalCharacter where Element == Character? {}
extension AnyIterator: SequenceOfDouble where Element == Double {}
extension AnyIterator: SequenceOfOptionalDouble where Element == Double? {}
extension AnyIterator: SequenceOfError where Element == Error {}
extension AnyIterator: SequenceOfOptionalError where Element == Error? {}
extension AnyIterator: SequenceOfFloat where Element == Float {}
extension AnyIterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension AnyIterator: SequenceOfFloat80 where Element == Float80 {}
extension AnyIterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension AnyIterator: SequenceOfInt where Element == Int {}
extension AnyIterator: SequenceOfOptionalInt where Element == Int? {}
extension AnyIterator: SequenceOfInt16 where Element == Int16 {}
extension AnyIterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension AnyIterator: SequenceOfInt32 where Element == Int32 {}
extension AnyIterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension AnyIterator: SequenceOfInt64 where Element == Int64 {}
extension AnyIterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension AnyIterator: SequenceOfInt8 where Element == Int8 {}
extension AnyIterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension AnyIterator: SequenceOfString where Element == String {}
extension AnyIterator: SequenceOfOptionalString where Element == String? {}
extension AnyIterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnyIterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnyIterator: SequenceOfSubstring where Element == Substring {}
extension AnyIterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension AnyIterator: SequenceOfUInt where Element == UInt {}
extension AnyIterator: SequenceOfOptionalUInt where Element == UInt? {}
extension AnyIterator: SequenceOfUInt16 where Element == UInt16 {}
extension AnyIterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension AnyIterator: SequenceOfUInt32 where Element == UInt32 {}
extension AnyIterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension AnyIterator: SequenceOfUInt64 where Element == UInt64 {}
extension AnyIterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension AnyIterator: SequenceOfUInt8 where Element == UInt8 {}
extension AnyIterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension AnyIterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnyIterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnyIterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnyIterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnyIterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnyIterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension AnySequence: SequenceOfBool where Element == Bool {}
extension AnySequence: SequenceOfOptionalBool where Element == Bool? {}
extension AnySequence: SequenceOfCharacter where Element == Character {}
extension AnySequence: SequenceOfOptionalCharacter where Element == Character? {}
extension AnySequence: SequenceOfDouble where Element == Double {}
extension AnySequence: SequenceOfOptionalDouble where Element == Double? {}
extension AnySequence: SequenceOfError where Element == Error {}
extension AnySequence: SequenceOfOptionalError where Element == Error? {}
extension AnySequence: SequenceOfFloat where Element == Float {}
extension AnySequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension AnySequence: SequenceOfFloat80 where Element == Float80 {}
extension AnySequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension AnySequence: SequenceOfInt where Element == Int {}
extension AnySequence: SequenceOfOptionalInt where Element == Int? {}
extension AnySequence: SequenceOfInt16 where Element == Int16 {}
extension AnySequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension AnySequence: SequenceOfInt32 where Element == Int32 {}
extension AnySequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension AnySequence: SequenceOfInt64 where Element == Int64 {}
extension AnySequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension AnySequence: SequenceOfInt8 where Element == Int8 {}
extension AnySequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension AnySequence: SequenceOfString where Element == String {}
extension AnySequence: SequenceOfOptionalString where Element == String? {}
extension AnySequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension AnySequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension AnySequence: SequenceOfSubstring where Element == Substring {}
extension AnySequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension AnySequence: SequenceOfUInt where Element == UInt {}
extension AnySequence: SequenceOfOptionalUInt where Element == UInt? {}
extension AnySequence: SequenceOfUInt16 where Element == UInt16 {}
extension AnySequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension AnySequence: SequenceOfUInt32 where Element == UInt32 {}
extension AnySequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension AnySequence: SequenceOfUInt64 where Element == UInt64 {}
extension AnySequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension AnySequence: SequenceOfUInt8 where Element == UInt8 {}
extension AnySequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension AnySequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension AnySequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension AnySequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension AnySequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension AnySequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension AnySequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension DropFirstSequence: SequenceOfBool where Element == Bool {}
extension DropFirstSequence: SequenceOfOptionalBool where Element == Bool? {}
extension DropFirstSequence: SequenceOfCharacter where Element == Character {}
extension DropFirstSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension DropFirstSequence: SequenceOfDouble where Element == Double {}
extension DropFirstSequence: SequenceOfOptionalDouble where Element == Double? {}
extension DropFirstSequence: SequenceOfError where Element == Error {}
extension DropFirstSequence: SequenceOfOptionalError where Element == Error? {}
extension DropFirstSequence: SequenceOfFloat where Element == Float {}
extension DropFirstSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension DropFirstSequence: SequenceOfFloat80 where Element == Float80 {}
extension DropFirstSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension DropFirstSequence: SequenceOfInt where Element == Int {}
extension DropFirstSequence: SequenceOfOptionalInt where Element == Int? {}
extension DropFirstSequence: SequenceOfInt16 where Element == Int16 {}
extension DropFirstSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension DropFirstSequence: SequenceOfInt32 where Element == Int32 {}
extension DropFirstSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension DropFirstSequence: SequenceOfInt64 where Element == Int64 {}
extension DropFirstSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension DropFirstSequence: SequenceOfInt8 where Element == Int8 {}
extension DropFirstSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension DropFirstSequence: SequenceOfString where Element == String {}
extension DropFirstSequence: SequenceOfOptionalString where Element == String? {}
extension DropFirstSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension DropFirstSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension DropFirstSequence: SequenceOfSubstring where Element == Substring {}
extension DropFirstSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension DropFirstSequence: SequenceOfUInt where Element == UInt {}
extension DropFirstSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension DropFirstSequence: SequenceOfUInt16 where Element == UInt16 {}
extension DropFirstSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension DropFirstSequence: SequenceOfUInt32 where Element == UInt32 {}
extension DropFirstSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension DropFirstSequence: SequenceOfUInt64 where Element == UInt64 {}
extension DropFirstSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension DropFirstSequence: SequenceOfUInt8 where Element == UInt8 {}
extension DropFirstSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension DropFirstSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension DropFirstSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension DropFirstSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension DropFirstSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension DropFirstSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension DropFirstSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension DropWhileSequence: SequenceOfBool where Element == Bool {}
extension DropWhileSequence: SequenceOfOptionalBool where Element == Bool? {}
extension DropWhileSequence: SequenceOfCharacter where Element == Character {}
extension DropWhileSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension DropWhileSequence: SequenceOfDouble where Element == Double {}
extension DropWhileSequence: SequenceOfOptionalDouble where Element == Double? {}
extension DropWhileSequence: SequenceOfError where Element == Error {}
extension DropWhileSequence: SequenceOfOptionalError where Element == Error? {}
extension DropWhileSequence: SequenceOfFloat where Element == Float {}
extension DropWhileSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension DropWhileSequence: SequenceOfFloat80 where Element == Float80 {}
extension DropWhileSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension DropWhileSequence: SequenceOfInt where Element == Int {}
extension DropWhileSequence: SequenceOfOptionalInt where Element == Int? {}
extension DropWhileSequence: SequenceOfInt16 where Element == Int16 {}
extension DropWhileSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension DropWhileSequence: SequenceOfInt32 where Element == Int32 {}
extension DropWhileSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension DropWhileSequence: SequenceOfInt64 where Element == Int64 {}
extension DropWhileSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension DropWhileSequence: SequenceOfInt8 where Element == Int8 {}
extension DropWhileSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension DropWhileSequence: SequenceOfString where Element == String {}
extension DropWhileSequence: SequenceOfOptionalString where Element == String? {}
extension DropWhileSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension DropWhileSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension DropWhileSequence: SequenceOfSubstring where Element == Substring {}
extension DropWhileSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension DropWhileSequence: SequenceOfUInt where Element == UInt {}
extension DropWhileSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension DropWhileSequence: SequenceOfUInt16 where Element == UInt16 {}
extension DropWhileSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension DropWhileSequence: SequenceOfUInt32 where Element == UInt32 {}
extension DropWhileSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension DropWhileSequence: SequenceOfUInt64 where Element == UInt64 {}
extension DropWhileSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension DropWhileSequence: SequenceOfUInt8 where Element == UInt8 {}
extension DropWhileSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension DropWhileSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension DropWhileSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension DropWhileSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension DropWhileSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension DropWhileSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension DropWhileSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension EmptyCollection.Iterator: SequenceOfBool where Element == Bool {}
extension EmptyCollection.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension EmptyCollection.Iterator: SequenceOfCharacter where Element == Character {}
extension EmptyCollection.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension EmptyCollection.Iterator: SequenceOfDouble where Element == Double {}
extension EmptyCollection.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension EmptyCollection.Iterator: SequenceOfError where Element == Error {}
extension EmptyCollection.Iterator: SequenceOfOptionalError where Element == Error? {}
extension EmptyCollection.Iterator: SequenceOfFloat where Element == Float {}
extension EmptyCollection.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension EmptyCollection.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension EmptyCollection.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension EmptyCollection.Iterator: SequenceOfInt where Element == Int {}
extension EmptyCollection.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension EmptyCollection.Iterator: SequenceOfInt16 where Element == Int16 {}
extension EmptyCollection.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension EmptyCollection.Iterator: SequenceOfInt32 where Element == Int32 {}
extension EmptyCollection.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension EmptyCollection.Iterator: SequenceOfInt64 where Element == Int64 {}
extension EmptyCollection.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension EmptyCollection.Iterator: SequenceOfInt8 where Element == Int8 {}
extension EmptyCollection.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension EmptyCollection.Iterator: SequenceOfString where Element == String {}
extension EmptyCollection.Iterator: SequenceOfOptionalString where Element == String? {}
extension EmptyCollection.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension EmptyCollection.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension EmptyCollection.Iterator: SequenceOfSubstring where Element == Substring {}
extension EmptyCollection.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension EmptyCollection.Iterator: SequenceOfUInt where Element == UInt {}
extension EmptyCollection.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension EmptyCollection.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension EmptyCollection.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension EmptyCollection.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension EmptyCollection.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension EmptyCollection.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension EmptyCollection.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension EmptyCollection.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension EmptyCollection.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension EmptyCollection.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension EmptyCollection.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension EmptyCollection.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension EmptyCollection.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension EmptyCollection.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension EmptyCollection.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension FlattenSequence: SequenceOfBool where Element == Bool {}
extension FlattenSequence: SequenceOfOptionalBool where Element == Bool? {}
extension FlattenSequence: SequenceOfCharacter where Element == Character {}
extension FlattenSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension FlattenSequence: SequenceOfDouble where Element == Double {}
extension FlattenSequence: SequenceOfOptionalDouble where Element == Double? {}
extension FlattenSequence: SequenceOfError where Element == Error {}
extension FlattenSequence: SequenceOfOptionalError where Element == Error? {}
extension FlattenSequence: SequenceOfFloat where Element == Float {}
extension FlattenSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension FlattenSequence: SequenceOfFloat80 where Element == Float80 {}
extension FlattenSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension FlattenSequence: SequenceOfInt where Element == Int {}
extension FlattenSequence: SequenceOfOptionalInt where Element == Int? {}
extension FlattenSequence: SequenceOfInt16 where Element == Int16 {}
extension FlattenSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension FlattenSequence: SequenceOfInt32 where Element == Int32 {}
extension FlattenSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension FlattenSequence: SequenceOfInt64 where Element == Int64 {}
extension FlattenSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension FlattenSequence: SequenceOfInt8 where Element == Int8 {}
extension FlattenSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension FlattenSequence: SequenceOfString where Element == String {}
extension FlattenSequence: SequenceOfOptionalString where Element == String? {}
extension FlattenSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension FlattenSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension FlattenSequence: SequenceOfSubstring where Element == Substring {}
extension FlattenSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension FlattenSequence: SequenceOfUInt where Element == UInt {}
extension FlattenSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension FlattenSequence: SequenceOfUInt16 where Element == UInt16 {}
extension FlattenSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension FlattenSequence: SequenceOfUInt32 where Element == UInt32 {}
extension FlattenSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension FlattenSequence: SequenceOfUInt64 where Element == UInt64 {}
extension FlattenSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension FlattenSequence: SequenceOfUInt8 where Element == UInt8 {}
extension FlattenSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension FlattenSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension FlattenSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension FlattenSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension FlattenSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension FlattenSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension FlattenSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension FlattenSequence.Iterator: SequenceOfBool where Element == Bool {}
extension FlattenSequence.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension FlattenSequence.Iterator: SequenceOfCharacter where Element == Character {}
extension FlattenSequence.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension FlattenSequence.Iterator: SequenceOfDouble where Element == Double {}
extension FlattenSequence.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension FlattenSequence.Iterator: SequenceOfError where Element == Error {}
extension FlattenSequence.Iterator: SequenceOfOptionalError where Element == Error? {}
extension FlattenSequence.Iterator: SequenceOfFloat where Element == Float {}
extension FlattenSequence.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension FlattenSequence.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension FlattenSequence.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension FlattenSequence.Iterator: SequenceOfInt where Element == Int {}
extension FlattenSequence.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension FlattenSequence.Iterator: SequenceOfInt16 where Element == Int16 {}
extension FlattenSequence.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension FlattenSequence.Iterator: SequenceOfInt32 where Element == Int32 {}
extension FlattenSequence.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension FlattenSequence.Iterator: SequenceOfInt64 where Element == Int64 {}
extension FlattenSequence.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension FlattenSequence.Iterator: SequenceOfInt8 where Element == Int8 {}
extension FlattenSequence.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension FlattenSequence.Iterator: SequenceOfString where Element == String {}
extension FlattenSequence.Iterator: SequenceOfOptionalString where Element == String? {}
extension FlattenSequence.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension FlattenSequence.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension FlattenSequence.Iterator: SequenceOfSubstring where Element == Substring {}
extension FlattenSequence.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension FlattenSequence.Iterator: SequenceOfUInt where Element == UInt {}
extension FlattenSequence.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension FlattenSequence.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension FlattenSequence.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension FlattenSequence.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension FlattenSequence.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension FlattenSequence.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension FlattenSequence.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension FlattenSequence.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension FlattenSequence.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension FlattenSequence.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension FlattenSequence.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension FlattenSequence.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension FlattenSequence.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension FlattenSequence.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension FlattenSequence.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension IndexingIterator: SequenceOfBool where Element == Bool {}
extension IndexingIterator: SequenceOfOptionalBool where Element == Bool? {}
extension IndexingIterator: SequenceOfCharacter where Element == Character {}
extension IndexingIterator: SequenceOfOptionalCharacter where Element == Character? {}
extension IndexingIterator: SequenceOfDouble where Element == Double {}
extension IndexingIterator: SequenceOfOptionalDouble where Element == Double? {}
extension IndexingIterator: SequenceOfError where Element == Error {}
extension IndexingIterator: SequenceOfOptionalError where Element == Error? {}
extension IndexingIterator: SequenceOfFloat where Element == Float {}
extension IndexingIterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension IndexingIterator: SequenceOfFloat80 where Element == Float80 {}
extension IndexingIterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension IndexingIterator: SequenceOfInt where Element == Int {}
extension IndexingIterator: SequenceOfOptionalInt where Element == Int? {}
extension IndexingIterator: SequenceOfInt16 where Element == Int16 {}
extension IndexingIterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension IndexingIterator: SequenceOfInt32 where Element == Int32 {}
extension IndexingIterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension IndexingIterator: SequenceOfInt64 where Element == Int64 {}
extension IndexingIterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension IndexingIterator: SequenceOfInt8 where Element == Int8 {}
extension IndexingIterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension IndexingIterator: SequenceOfString where Element == String {}
extension IndexingIterator: SequenceOfOptionalString where Element == String? {}
extension IndexingIterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension IndexingIterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension IndexingIterator: SequenceOfSubstring where Element == Substring {}
extension IndexingIterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension IndexingIterator: SequenceOfUInt where Element == UInt {}
extension IndexingIterator: SequenceOfOptionalUInt where Element == UInt? {}
extension IndexingIterator: SequenceOfUInt16 where Element == UInt16 {}
extension IndexingIterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension IndexingIterator: SequenceOfUInt32 where Element == UInt32 {}
extension IndexingIterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension IndexingIterator: SequenceOfUInt64 where Element == UInt64 {}
extension IndexingIterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension IndexingIterator: SequenceOfUInt8 where Element == UInt8 {}
extension IndexingIterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension IndexingIterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension IndexingIterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension IndexingIterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension IndexingIterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension IndexingIterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension IndexingIterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension JoinedSequence: SequenceOfBool where Element == Bool {}
extension JoinedSequence: SequenceOfOptionalBool where Element == Bool? {}
extension JoinedSequence: SequenceOfCharacter where Element == Character {}
extension JoinedSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension JoinedSequence: SequenceOfDouble where Element == Double {}
extension JoinedSequence: SequenceOfOptionalDouble where Element == Double? {}
extension JoinedSequence: SequenceOfError where Element == Error {}
extension JoinedSequence: SequenceOfOptionalError where Element == Error? {}
extension JoinedSequence: SequenceOfFloat where Element == Float {}
extension JoinedSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension JoinedSequence: SequenceOfFloat80 where Element == Float80 {}
extension JoinedSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension JoinedSequence: SequenceOfInt where Element == Int {}
extension JoinedSequence: SequenceOfOptionalInt where Element == Int? {}
extension JoinedSequence: SequenceOfInt16 where Element == Int16 {}
extension JoinedSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension JoinedSequence: SequenceOfInt32 where Element == Int32 {}
extension JoinedSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension JoinedSequence: SequenceOfInt64 where Element == Int64 {}
extension JoinedSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension JoinedSequence: SequenceOfInt8 where Element == Int8 {}
extension JoinedSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension JoinedSequence: SequenceOfString where Element == String {}
extension JoinedSequence: SequenceOfOptionalString where Element == String? {}
extension JoinedSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension JoinedSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension JoinedSequence: SequenceOfSubstring where Element == Substring {}
extension JoinedSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension JoinedSequence: SequenceOfUInt where Element == UInt {}
extension JoinedSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension JoinedSequence: SequenceOfUInt16 where Element == UInt16 {}
extension JoinedSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension JoinedSequence: SequenceOfUInt32 where Element == UInt32 {}
extension JoinedSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension JoinedSequence: SequenceOfUInt64 where Element == UInt64 {}
extension JoinedSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension JoinedSequence: SequenceOfUInt8 where Element == UInt8 {}
extension JoinedSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension JoinedSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension JoinedSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension JoinedSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension JoinedSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension JoinedSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension JoinedSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyDropWhileSequence: SequenceOfBool where Element == Bool {}
extension LazyDropWhileSequence: SequenceOfOptionalBool where Element == Bool? {}
extension LazyDropWhileSequence: LazySequenceOfBool where Element == Bool {}
extension LazyDropWhileSequence: LazySequenceOfOptionalBool where Element == Bool? {}
extension LazyDropWhileSequence: SequenceOfCharacter where Element == Character {}
extension LazyDropWhileSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyDropWhileSequence: LazySequenceOfCharacter where Element == Character {}
extension LazyDropWhileSequence: LazySequenceOfOptionalCharacter where Element == Character? {}
extension LazyDropWhileSequence: SequenceOfDouble where Element == Double {}
extension LazyDropWhileSequence: SequenceOfOptionalDouble where Element == Double? {}
extension LazyDropWhileSequence: LazySequenceOfDouble where Element == Double {}
extension LazyDropWhileSequence: LazySequenceOfOptionalDouble where Element == Double? {}
extension LazyDropWhileSequence: SequenceOfError where Element == Error {}
extension LazyDropWhileSequence: SequenceOfOptionalError where Element == Error? {}
extension LazyDropWhileSequence: LazySequenceOfError where Element == Error {}
extension LazyDropWhileSequence: LazySequenceOfOptionalError where Element == Error? {}
extension LazyDropWhileSequence: SequenceOfFloat where Element == Float {}
extension LazyDropWhileSequence: SequenceOfOptionalFloat where Element == Float? {}
extension LazyDropWhileSequence: LazySequenceOfFloat where Element == Float {}
extension LazyDropWhileSequence: LazySequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyDropWhileSequence: SequenceOfFloat80 where Element == Float80 {}
extension LazyDropWhileSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
extension LazyDropWhileSequence: LazySequenceOfFloat80 where Element == Float80 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyDropWhileSequence: SequenceOfInt where Element == Int {}
extension LazyDropWhileSequence: SequenceOfOptionalInt where Element == Int? {}
extension LazyDropWhileSequence: LazySequenceOfInt where Element == Int {}
extension LazyDropWhileSequence: LazySequenceOfOptionalInt where Element == Int? {}
extension LazyDropWhileSequence: SequenceOfInt16 where Element == Int16 {}
extension LazyDropWhileSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyDropWhileSequence: LazySequenceOfInt16 where Element == Int16 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalInt16 where Element == Int16? {}
extension LazyDropWhileSequence: SequenceOfInt32 where Element == Int32 {}
extension LazyDropWhileSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyDropWhileSequence: LazySequenceOfInt32 where Element == Int32 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalInt32 where Element == Int32? {}
extension LazyDropWhileSequence: SequenceOfInt64 where Element == Int64 {}
extension LazyDropWhileSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyDropWhileSequence: LazySequenceOfInt64 where Element == Int64 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalInt64 where Element == Int64? {}
extension LazyDropWhileSequence: SequenceOfInt8 where Element == Int8 {}
extension LazyDropWhileSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyDropWhileSequence: LazySequenceOfInt8 where Element == Int8 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalInt8 where Element == Int8? {}
extension LazyDropWhileSequence: SequenceOfString where Element == String {}
extension LazyDropWhileSequence: SequenceOfOptionalString where Element == String? {}
extension LazyDropWhileSequence: LazySequenceOfString where Element == String {}
extension LazyDropWhileSequence: LazySequenceOfOptionalString where Element == String? {}
extension LazyDropWhileSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyDropWhileSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyDropWhileSequence: LazySequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyDropWhileSequence: LazySequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyDropWhileSequence: SequenceOfSubstring where Element == Substring {}
extension LazyDropWhileSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyDropWhileSequence: LazySequenceOfSubstring where Element == Substring {}
extension LazyDropWhileSequence: LazySequenceOfOptionalSubstring where Element == Substring? {}
extension LazyDropWhileSequence: SequenceOfUInt where Element == UInt {}
extension LazyDropWhileSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyDropWhileSequence: LazySequenceOfUInt where Element == UInt {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUInt where Element == UInt? {}
extension LazyDropWhileSequence: SequenceOfUInt16 where Element == UInt16 {}
extension LazyDropWhileSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyDropWhileSequence: LazySequenceOfUInt16 where Element == UInt16 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyDropWhileSequence: SequenceOfUInt32 where Element == UInt32 {}
extension LazyDropWhileSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyDropWhileSequence: LazySequenceOfUInt32 where Element == UInt32 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyDropWhileSequence: SequenceOfUInt64 where Element == UInt64 {}
extension LazyDropWhileSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyDropWhileSequence: LazySequenceOfUInt64 where Element == UInt64 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyDropWhileSequence: SequenceOfUInt8 where Element == UInt8 {}
extension LazyDropWhileSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyDropWhileSequence: LazySequenceOfUInt8 where Element == UInt8 {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyDropWhileSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyDropWhileSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyDropWhileSequence: LazySequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyDropWhileSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyDropWhileSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyDropWhileSequence: LazySequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyDropWhileSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyDropWhileSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension LazyDropWhileSequence: LazySequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyDropWhileSequence: LazySequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyFilterSequence: SequenceOfBool where Element == Bool {}
extension LazyFilterSequence: SequenceOfOptionalBool where Element == Bool? {}
extension LazyFilterSequence: LazySequenceOfBool where Element == Bool {}
extension LazyFilterSequence: LazySequenceOfOptionalBool where Element == Bool? {}
extension LazyFilterSequence: SequenceOfCharacter where Element == Character {}
extension LazyFilterSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyFilterSequence: LazySequenceOfCharacter where Element == Character {}
extension LazyFilterSequence: LazySequenceOfOptionalCharacter where Element == Character? {}
extension LazyFilterSequence: SequenceOfDouble where Element == Double {}
extension LazyFilterSequence: SequenceOfOptionalDouble where Element == Double? {}
extension LazyFilterSequence: LazySequenceOfDouble where Element == Double {}
extension LazyFilterSequence: LazySequenceOfOptionalDouble where Element == Double? {}
extension LazyFilterSequence: SequenceOfError where Element == Error {}
extension LazyFilterSequence: SequenceOfOptionalError where Element == Error? {}
extension LazyFilterSequence: LazySequenceOfError where Element == Error {}
extension LazyFilterSequence: LazySequenceOfOptionalError where Element == Error? {}
extension LazyFilterSequence: SequenceOfFloat where Element == Float {}
extension LazyFilterSequence: SequenceOfOptionalFloat where Element == Float? {}
extension LazyFilterSequence: LazySequenceOfFloat where Element == Float {}
extension LazyFilterSequence: LazySequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyFilterSequence: SequenceOfFloat80 where Element == Float80 {}
extension LazyFilterSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
extension LazyFilterSequence: LazySequenceOfFloat80 where Element == Float80 {}
extension LazyFilterSequence: LazySequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyFilterSequence: SequenceOfInt where Element == Int {}
extension LazyFilterSequence: SequenceOfOptionalInt where Element == Int? {}
extension LazyFilterSequence: LazySequenceOfInt where Element == Int {}
extension LazyFilterSequence: LazySequenceOfOptionalInt where Element == Int? {}
extension LazyFilterSequence: SequenceOfInt16 where Element == Int16 {}
extension LazyFilterSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyFilterSequence: LazySequenceOfInt16 where Element == Int16 {}
extension LazyFilterSequence: LazySequenceOfOptionalInt16 where Element == Int16? {}
extension LazyFilterSequence: SequenceOfInt32 where Element == Int32 {}
extension LazyFilterSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyFilterSequence: LazySequenceOfInt32 where Element == Int32 {}
extension LazyFilterSequence: LazySequenceOfOptionalInt32 where Element == Int32? {}
extension LazyFilterSequence: SequenceOfInt64 where Element == Int64 {}
extension LazyFilterSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyFilterSequence: LazySequenceOfInt64 where Element == Int64 {}
extension LazyFilterSequence: LazySequenceOfOptionalInt64 where Element == Int64? {}
extension LazyFilterSequence: SequenceOfInt8 where Element == Int8 {}
extension LazyFilterSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyFilterSequence: LazySequenceOfInt8 where Element == Int8 {}
extension LazyFilterSequence: LazySequenceOfOptionalInt8 where Element == Int8? {}
extension LazyFilterSequence: SequenceOfString where Element == String {}
extension LazyFilterSequence: SequenceOfOptionalString where Element == String? {}
extension LazyFilterSequence: LazySequenceOfString where Element == String {}
extension LazyFilterSequence: LazySequenceOfOptionalString where Element == String? {}
extension LazyFilterSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyFilterSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyFilterSequence: LazySequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyFilterSequence: LazySequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyFilterSequence: SequenceOfSubstring where Element == Substring {}
extension LazyFilterSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyFilterSequence: LazySequenceOfSubstring where Element == Substring {}
extension LazyFilterSequence: LazySequenceOfOptionalSubstring where Element == Substring? {}
extension LazyFilterSequence: SequenceOfUInt where Element == UInt {}
extension LazyFilterSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyFilterSequence: LazySequenceOfUInt where Element == UInt {}
extension LazyFilterSequence: LazySequenceOfOptionalUInt where Element == UInt? {}
extension LazyFilterSequence: SequenceOfUInt16 where Element == UInt16 {}
extension LazyFilterSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyFilterSequence: LazySequenceOfUInt16 where Element == UInt16 {}
extension LazyFilterSequence: LazySequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyFilterSequence: SequenceOfUInt32 where Element == UInt32 {}
extension LazyFilterSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyFilterSequence: LazySequenceOfUInt32 where Element == UInt32 {}
extension LazyFilterSequence: LazySequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyFilterSequence: SequenceOfUInt64 where Element == UInt64 {}
extension LazyFilterSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyFilterSequence: LazySequenceOfUInt64 where Element == UInt64 {}
extension LazyFilterSequence: LazySequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyFilterSequence: SequenceOfUInt8 where Element == UInt8 {}
extension LazyFilterSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyFilterSequence: LazySequenceOfUInt8 where Element == UInt8 {}
extension LazyFilterSequence: LazySequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyFilterSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyFilterSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyFilterSequence: LazySequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyFilterSequence: LazySequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyFilterSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyFilterSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyFilterSequence: LazySequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyFilterSequence: LazySequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyFilterSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyFilterSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension LazyFilterSequence: LazySequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyFilterSequence: LazySequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyFilterSequence.Iterator: SequenceOfBool where Element == Bool {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension LazyFilterSequence.Iterator: SequenceOfCharacter where Element == Character {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyFilterSequence.Iterator: SequenceOfDouble where Element == Double {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension LazyFilterSequence.Iterator: SequenceOfError where Element == Error {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalError where Element == Error? {}
extension LazyFilterSequence.Iterator: SequenceOfFloat where Element == Float {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyFilterSequence.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyFilterSequence.Iterator: SequenceOfInt where Element == Int {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension LazyFilterSequence.Iterator: SequenceOfInt16 where Element == Int16 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyFilterSequence.Iterator: SequenceOfInt32 where Element == Int32 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyFilterSequence.Iterator: SequenceOfInt64 where Element == Int64 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyFilterSequence.Iterator: SequenceOfInt8 where Element == Int8 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyFilterSequence.Iterator: SequenceOfString where Element == String {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalString where Element == String? {}
extension LazyFilterSequence.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyFilterSequence.Iterator: SequenceOfSubstring where Element == Substring {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyFilterSequence.Iterator: SequenceOfUInt where Element == UInt {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyFilterSequence.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyFilterSequence.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyFilterSequence.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyFilterSequence.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyFilterSequence.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyFilterSequence.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyFilterSequence.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyFilterSequence.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyMapSequence: SequenceOfBool where Element == Bool {}
extension LazyMapSequence: SequenceOfOptionalBool where Element == Bool? {}
extension LazyMapSequence: LazySequenceOfBool where Element == Bool {}
extension LazyMapSequence: LazySequenceOfOptionalBool where Element == Bool? {}
extension LazyMapSequence: SequenceOfCharacter where Element == Character {}
extension LazyMapSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyMapSequence: LazySequenceOfCharacter where Element == Character {}
extension LazyMapSequence: LazySequenceOfOptionalCharacter where Element == Character? {}
extension LazyMapSequence: SequenceOfDouble where Element == Double {}
extension LazyMapSequence: SequenceOfOptionalDouble where Element == Double? {}
extension LazyMapSequence: LazySequenceOfDouble where Element == Double {}
extension LazyMapSequence: LazySequenceOfOptionalDouble where Element == Double? {}
extension LazyMapSequence: SequenceOfError where Element == Error {}
extension LazyMapSequence: SequenceOfOptionalError where Element == Error? {}
extension LazyMapSequence: LazySequenceOfError where Element == Error {}
extension LazyMapSequence: LazySequenceOfOptionalError where Element == Error? {}
extension LazyMapSequence: SequenceOfFloat where Element == Float {}
extension LazyMapSequence: SequenceOfOptionalFloat where Element == Float? {}
extension LazyMapSequence: LazySequenceOfFloat where Element == Float {}
extension LazyMapSequence: LazySequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyMapSequence: SequenceOfFloat80 where Element == Float80 {}
extension LazyMapSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
extension LazyMapSequence: LazySequenceOfFloat80 where Element == Float80 {}
extension LazyMapSequence: LazySequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyMapSequence: SequenceOfInt where Element == Int {}
extension LazyMapSequence: SequenceOfOptionalInt where Element == Int? {}
extension LazyMapSequence: LazySequenceOfInt where Element == Int {}
extension LazyMapSequence: LazySequenceOfOptionalInt where Element == Int? {}
extension LazyMapSequence: SequenceOfInt16 where Element == Int16 {}
extension LazyMapSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyMapSequence: LazySequenceOfInt16 where Element == Int16 {}
extension LazyMapSequence: LazySequenceOfOptionalInt16 where Element == Int16? {}
extension LazyMapSequence: SequenceOfInt32 where Element == Int32 {}
extension LazyMapSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyMapSequence: LazySequenceOfInt32 where Element == Int32 {}
extension LazyMapSequence: LazySequenceOfOptionalInt32 where Element == Int32? {}
extension LazyMapSequence: SequenceOfInt64 where Element == Int64 {}
extension LazyMapSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyMapSequence: LazySequenceOfInt64 where Element == Int64 {}
extension LazyMapSequence: LazySequenceOfOptionalInt64 where Element == Int64? {}
extension LazyMapSequence: SequenceOfInt8 where Element == Int8 {}
extension LazyMapSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyMapSequence: LazySequenceOfInt8 where Element == Int8 {}
extension LazyMapSequence: LazySequenceOfOptionalInt8 where Element == Int8? {}
extension LazyMapSequence: SequenceOfString where Element == String {}
extension LazyMapSequence: SequenceOfOptionalString where Element == String? {}
extension LazyMapSequence: LazySequenceOfString where Element == String {}
extension LazyMapSequence: LazySequenceOfOptionalString where Element == String? {}
extension LazyMapSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyMapSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyMapSequence: LazySequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyMapSequence: LazySequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyMapSequence: SequenceOfSubstring where Element == Substring {}
extension LazyMapSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyMapSequence: LazySequenceOfSubstring where Element == Substring {}
extension LazyMapSequence: LazySequenceOfOptionalSubstring where Element == Substring? {}
extension LazyMapSequence: SequenceOfUInt where Element == UInt {}
extension LazyMapSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyMapSequence: LazySequenceOfUInt where Element == UInt {}
extension LazyMapSequence: LazySequenceOfOptionalUInt where Element == UInt? {}
extension LazyMapSequence: SequenceOfUInt16 where Element == UInt16 {}
extension LazyMapSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyMapSequence: LazySequenceOfUInt16 where Element == UInt16 {}
extension LazyMapSequence: LazySequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyMapSequence: SequenceOfUInt32 where Element == UInt32 {}
extension LazyMapSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyMapSequence: LazySequenceOfUInt32 where Element == UInt32 {}
extension LazyMapSequence: LazySequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyMapSequence: SequenceOfUInt64 where Element == UInt64 {}
extension LazyMapSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyMapSequence: LazySequenceOfUInt64 where Element == UInt64 {}
extension LazyMapSequence: LazySequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyMapSequence: SequenceOfUInt8 where Element == UInt8 {}
extension LazyMapSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyMapSequence: LazySequenceOfUInt8 where Element == UInt8 {}
extension LazyMapSequence: LazySequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyMapSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyMapSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyMapSequence: LazySequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyMapSequence: LazySequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyMapSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyMapSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyMapSequence: LazySequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyMapSequence: LazySequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyMapSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyMapSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension LazyMapSequence: LazySequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyMapSequence: LazySequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyMapSequence.Iterator: SequenceOfBool where Element == Bool {}
extension LazyMapSequence.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension LazyMapSequence.Iterator: SequenceOfCharacter where Element == Character {}
extension LazyMapSequence.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyMapSequence.Iterator: SequenceOfDouble where Element == Double {}
extension LazyMapSequence.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension LazyMapSequence.Iterator: SequenceOfError where Element == Error {}
extension LazyMapSequence.Iterator: SequenceOfOptionalError where Element == Error? {}
extension LazyMapSequence.Iterator: SequenceOfFloat where Element == Float {}
extension LazyMapSequence.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyMapSequence.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyMapSequence.Iterator: SequenceOfInt where Element == Int {}
extension LazyMapSequence.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension LazyMapSequence.Iterator: SequenceOfInt16 where Element == Int16 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyMapSequence.Iterator: SequenceOfInt32 where Element == Int32 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyMapSequence.Iterator: SequenceOfInt64 where Element == Int64 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyMapSequence.Iterator: SequenceOfInt8 where Element == Int8 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyMapSequence.Iterator: SequenceOfString where Element == String {}
extension LazyMapSequence.Iterator: SequenceOfOptionalString where Element == String? {}
extension LazyMapSequence.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyMapSequence.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyMapSequence.Iterator: SequenceOfSubstring where Element == Substring {}
extension LazyMapSequence.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyMapSequence.Iterator: SequenceOfUInt where Element == UInt {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyMapSequence.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyMapSequence.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyMapSequence.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyMapSequence.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyMapSequence.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyMapSequence.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyMapSequence.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyMapSequence.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyPrefixWhileSequence: SequenceOfBool where Element == Bool {}
extension LazyPrefixWhileSequence: SequenceOfOptionalBool where Element == Bool? {}
extension LazyPrefixWhileSequence: LazySequenceOfBool where Element == Bool {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalBool where Element == Bool? {}
extension LazyPrefixWhileSequence: SequenceOfCharacter where Element == Character {}
extension LazyPrefixWhileSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyPrefixWhileSequence: LazySequenceOfCharacter where Element == Character {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalCharacter where Element == Character? {}
extension LazyPrefixWhileSequence: SequenceOfDouble where Element == Double {}
extension LazyPrefixWhileSequence: SequenceOfOptionalDouble where Element == Double? {}
extension LazyPrefixWhileSequence: LazySequenceOfDouble where Element == Double {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalDouble where Element == Double? {}
extension LazyPrefixWhileSequence: SequenceOfError where Element == Error {}
extension LazyPrefixWhileSequence: SequenceOfOptionalError where Element == Error? {}
extension LazyPrefixWhileSequence: LazySequenceOfError where Element == Error {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalError where Element == Error? {}
extension LazyPrefixWhileSequence: SequenceOfFloat where Element == Float {}
extension LazyPrefixWhileSequence: SequenceOfOptionalFloat where Element == Float? {}
extension LazyPrefixWhileSequence: LazySequenceOfFloat where Element == Float {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyPrefixWhileSequence: SequenceOfFloat80 where Element == Float80 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
extension LazyPrefixWhileSequence: LazySequenceOfFloat80 where Element == Float80 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyPrefixWhileSequence: SequenceOfInt where Element == Int {}
extension LazyPrefixWhileSequence: SequenceOfOptionalInt where Element == Int? {}
extension LazyPrefixWhileSequence: LazySequenceOfInt where Element == Int {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalInt where Element == Int? {}
extension LazyPrefixWhileSequence: SequenceOfInt16 where Element == Int16 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyPrefixWhileSequence: LazySequenceOfInt16 where Element == Int16 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalInt16 where Element == Int16? {}
extension LazyPrefixWhileSequence: SequenceOfInt32 where Element == Int32 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyPrefixWhileSequence: LazySequenceOfInt32 where Element == Int32 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalInt32 where Element == Int32? {}
extension LazyPrefixWhileSequence: SequenceOfInt64 where Element == Int64 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyPrefixWhileSequence: LazySequenceOfInt64 where Element == Int64 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalInt64 where Element == Int64? {}
extension LazyPrefixWhileSequence: SequenceOfInt8 where Element == Int8 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyPrefixWhileSequence: LazySequenceOfInt8 where Element == Int8 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalInt8 where Element == Int8? {}
extension LazyPrefixWhileSequence: SequenceOfString where Element == String {}
extension LazyPrefixWhileSequence: SequenceOfOptionalString where Element == String? {}
extension LazyPrefixWhileSequence: LazySequenceOfString where Element == String {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalString where Element == String? {}
extension LazyPrefixWhileSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyPrefixWhileSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyPrefixWhileSequence: LazySequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyPrefixWhileSequence: SequenceOfSubstring where Element == Substring {}
extension LazyPrefixWhileSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyPrefixWhileSequence: LazySequenceOfSubstring where Element == Substring {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalSubstring where Element == Substring? {}
extension LazyPrefixWhileSequence: SequenceOfUInt where Element == UInt {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyPrefixWhileSequence: LazySequenceOfUInt where Element == UInt {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUInt where Element == UInt? {}
extension LazyPrefixWhileSequence: SequenceOfUInt16 where Element == UInt16 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyPrefixWhileSequence: LazySequenceOfUInt16 where Element == UInt16 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyPrefixWhileSequence: SequenceOfUInt32 where Element == UInt32 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyPrefixWhileSequence: LazySequenceOfUInt32 where Element == UInt32 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyPrefixWhileSequence: SequenceOfUInt64 where Element == UInt64 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyPrefixWhileSequence: LazySequenceOfUInt64 where Element == UInt64 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyPrefixWhileSequence: SequenceOfUInt8 where Element == UInt8 {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyPrefixWhileSequence: LazySequenceOfUInt8 where Element == UInt8 {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyPrefixWhileSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyPrefixWhileSequence: LazySequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyPrefixWhileSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyPrefixWhileSequence: LazySequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyPrefixWhileSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyPrefixWhileSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension LazyPrefixWhileSequence: LazySequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyPrefixWhileSequence: LazySequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazyPrefixWhileSequence.Iterator: SequenceOfBool where Element == Bool {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfCharacter where Element == Character {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfDouble where Element == Double {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfError where Element == Error {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalError where Element == Error? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfFloat where Element == Float {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazyPrefixWhileSequence.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazyPrefixWhileSequence.Iterator: SequenceOfInt where Element == Int {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfInt16 where Element == Int16 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfInt32 where Element == Int32 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfInt64 where Element == Int64 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfInt8 where Element == Int8 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfString where Element == String {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalString where Element == String? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfSubstring where Element == Substring {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUInt where Element == UInt {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazyPrefixWhileSequence.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension LazySequence: SequenceOfBool where Element == Bool {}
extension LazySequence: SequenceOfOptionalBool where Element == Bool? {}
extension LazySequence: LazySequenceOfBool where Element == Bool {}
extension LazySequence: LazySequenceOfOptionalBool where Element == Bool? {}
extension LazySequence: SequenceOfCharacter where Element == Character {}
extension LazySequence: SequenceOfOptionalCharacter where Element == Character? {}
extension LazySequence: LazySequenceOfCharacter where Element == Character {}
extension LazySequence: LazySequenceOfOptionalCharacter where Element == Character? {}
extension LazySequence: SequenceOfDouble where Element == Double {}
extension LazySequence: SequenceOfOptionalDouble where Element == Double? {}
extension LazySequence: LazySequenceOfDouble where Element == Double {}
extension LazySequence: LazySequenceOfOptionalDouble where Element == Double? {}
extension LazySequence: SequenceOfError where Element == Error {}
extension LazySequence: SequenceOfOptionalError where Element == Error? {}
extension LazySequence: LazySequenceOfError where Element == Error {}
extension LazySequence: LazySequenceOfOptionalError where Element == Error? {}
extension LazySequence: SequenceOfFloat where Element == Float {}
extension LazySequence: SequenceOfOptionalFloat where Element == Float? {}
extension LazySequence: LazySequenceOfFloat where Element == Float {}
extension LazySequence: LazySequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension LazySequence: SequenceOfFloat80 where Element == Float80 {}
extension LazySequence: SequenceOfOptionalFloat80 where Element == Float80? {}
extension LazySequence: LazySequenceOfFloat80 where Element == Float80 {}
extension LazySequence: LazySequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension LazySequence: SequenceOfInt where Element == Int {}
extension LazySequence: SequenceOfOptionalInt where Element == Int? {}
extension LazySequence: LazySequenceOfInt where Element == Int {}
extension LazySequence: LazySequenceOfOptionalInt where Element == Int? {}
extension LazySequence: SequenceOfInt16 where Element == Int16 {}
extension LazySequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension LazySequence: LazySequenceOfInt16 where Element == Int16 {}
extension LazySequence: LazySequenceOfOptionalInt16 where Element == Int16? {}
extension LazySequence: SequenceOfInt32 where Element == Int32 {}
extension LazySequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension LazySequence: LazySequenceOfInt32 where Element == Int32 {}
extension LazySequence: LazySequenceOfOptionalInt32 where Element == Int32? {}
extension LazySequence: SequenceOfInt64 where Element == Int64 {}
extension LazySequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension LazySequence: LazySequenceOfInt64 where Element == Int64 {}
extension LazySequence: LazySequenceOfOptionalInt64 where Element == Int64? {}
extension LazySequence: SequenceOfInt8 where Element == Int8 {}
extension LazySequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension LazySequence: LazySequenceOfInt8 where Element == Int8 {}
extension LazySequence: LazySequenceOfOptionalInt8 where Element == Int8? {}
extension LazySequence: SequenceOfString where Element == String {}
extension LazySequence: SequenceOfOptionalString where Element == String? {}
extension LazySequence: LazySequenceOfString where Element == String {}
extension LazySequence: LazySequenceOfOptionalString where Element == String? {}
extension LazySequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazySequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazySequence: LazySequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension LazySequence: LazySequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension LazySequence: SequenceOfSubstring where Element == Substring {}
extension LazySequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension LazySequence: LazySequenceOfSubstring where Element == Substring {}
extension LazySequence: LazySequenceOfOptionalSubstring where Element == Substring? {}
extension LazySequence: SequenceOfUInt where Element == UInt {}
extension LazySequence: SequenceOfOptionalUInt where Element == UInt? {}
extension LazySequence: LazySequenceOfUInt where Element == UInt {}
extension LazySequence: LazySequenceOfOptionalUInt where Element == UInt? {}
extension LazySequence: SequenceOfUInt16 where Element == UInt16 {}
extension LazySequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazySequence: LazySequenceOfUInt16 where Element == UInt16 {}
extension LazySequence: LazySequenceOfOptionalUInt16 where Element == UInt16? {}
extension LazySequence: SequenceOfUInt32 where Element == UInt32 {}
extension LazySequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazySequence: LazySequenceOfUInt32 where Element == UInt32 {}
extension LazySequence: LazySequenceOfOptionalUInt32 where Element == UInt32? {}
extension LazySequence: SequenceOfUInt64 where Element == UInt64 {}
extension LazySequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazySequence: LazySequenceOfUInt64 where Element == UInt64 {}
extension LazySequence: LazySequenceOfOptionalUInt64 where Element == UInt64? {}
extension LazySequence: SequenceOfUInt8 where Element == UInt8 {}
extension LazySequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazySequence: LazySequenceOfUInt8 where Element == UInt8 {}
extension LazySequence: LazySequenceOfOptionalUInt8 where Element == UInt8? {}
extension LazySequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazySequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazySequence: LazySequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension LazySequence: LazySequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension LazySequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazySequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazySequence: LazySequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension LazySequence: LazySequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension LazySequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazySequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}
extension LazySequence: LazySequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension LazySequence: LazySequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension PartialRangeFrom: SequenceOfInt where Bound == Int {}
extension PartialRangeFrom: SequenceOfInt16 where Bound == Int16 {}
extension PartialRangeFrom: SequenceOfInt32 where Bound == Int32 {}
extension PartialRangeFrom: SequenceOfInt64 where Bound == Int64 {}
extension PartialRangeFrom: SequenceOfInt8 where Bound == Int8 {}
extension PartialRangeFrom: SequenceOfUInt where Bound == UInt {}
extension PartialRangeFrom: SequenceOfUInt16 where Bound == UInt16 {}
extension PartialRangeFrom: SequenceOfUInt32 where Bound == UInt32 {}
extension PartialRangeFrom: SequenceOfUInt64 where Bound == UInt64 {}
extension PartialRangeFrom: SequenceOfUInt8 where Bound == UInt8 {}

extension PrefixSequence: SequenceOfBool where Element == Bool {}
extension PrefixSequence: SequenceOfOptionalBool where Element == Bool? {}
extension PrefixSequence: SequenceOfCharacter where Element == Character {}
extension PrefixSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension PrefixSequence: SequenceOfDouble where Element == Double {}
extension PrefixSequence: SequenceOfOptionalDouble where Element == Double? {}
extension PrefixSequence: SequenceOfError where Element == Error {}
extension PrefixSequence: SequenceOfOptionalError where Element == Error? {}
extension PrefixSequence: SequenceOfFloat where Element == Float {}
extension PrefixSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension PrefixSequence: SequenceOfFloat80 where Element == Float80 {}
extension PrefixSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension PrefixSequence: SequenceOfInt where Element == Int {}
extension PrefixSequence: SequenceOfOptionalInt where Element == Int? {}
extension PrefixSequence: SequenceOfInt16 where Element == Int16 {}
extension PrefixSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension PrefixSequence: SequenceOfInt32 where Element == Int32 {}
extension PrefixSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension PrefixSequence: SequenceOfInt64 where Element == Int64 {}
extension PrefixSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension PrefixSequence: SequenceOfInt8 where Element == Int8 {}
extension PrefixSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension PrefixSequence: SequenceOfString where Element == String {}
extension PrefixSequence: SequenceOfOptionalString where Element == String? {}
extension PrefixSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension PrefixSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension PrefixSequence: SequenceOfSubstring where Element == Substring {}
extension PrefixSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension PrefixSequence: SequenceOfUInt where Element == UInt {}
extension PrefixSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension PrefixSequence: SequenceOfUInt16 where Element == UInt16 {}
extension PrefixSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension PrefixSequence: SequenceOfUInt32 where Element == UInt32 {}
extension PrefixSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension PrefixSequence: SequenceOfUInt64 where Element == UInt64 {}
extension PrefixSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension PrefixSequence: SequenceOfUInt8 where Element == UInt8 {}
extension PrefixSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension PrefixSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension PrefixSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension PrefixSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension PrefixSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension PrefixSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension PrefixSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension Range: SequenceOfInt where Bound == Int {}
extension Range: SequenceOfInt16 where Bound == Int16 {}
extension Range: SequenceOfInt32 where Bound == Int32 {}
extension Range: SequenceOfInt64 where Bound == Int64 {}
extension Range: SequenceOfInt8 where Bound == Int8 {}
extension Range: SequenceOfUInt where Bound == UInt {}
extension Range: SequenceOfUInt16 where Bound == UInt16 {}
extension Range: SequenceOfUInt32 where Bound == UInt32 {}
extension Range: SequenceOfUInt64 where Bound == UInt64 {}
extension Range: SequenceOfUInt8 where Bound == UInt8 {}

extension ReversedCollection.Iterator: SequenceOfBool where Element == Bool {}
extension ReversedCollection.Iterator: SequenceOfOptionalBool where Element == Bool? {}
extension ReversedCollection.Iterator: SequenceOfCharacter where Element == Character {}
extension ReversedCollection.Iterator: SequenceOfOptionalCharacter where Element == Character? {}
extension ReversedCollection.Iterator: SequenceOfDouble where Element == Double {}
extension ReversedCollection.Iterator: SequenceOfOptionalDouble where Element == Double? {}
extension ReversedCollection.Iterator: SequenceOfError where Element == Error {}
extension ReversedCollection.Iterator: SequenceOfOptionalError where Element == Error? {}
extension ReversedCollection.Iterator: SequenceOfFloat where Element == Float {}
extension ReversedCollection.Iterator: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension ReversedCollection.Iterator: SequenceOfFloat80 where Element == Float80 {}
extension ReversedCollection.Iterator: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension ReversedCollection.Iterator: SequenceOfInt where Element == Int {}
extension ReversedCollection.Iterator: SequenceOfOptionalInt where Element == Int? {}
extension ReversedCollection.Iterator: SequenceOfInt16 where Element == Int16 {}
extension ReversedCollection.Iterator: SequenceOfOptionalInt16 where Element == Int16? {}
extension ReversedCollection.Iterator: SequenceOfInt32 where Element == Int32 {}
extension ReversedCollection.Iterator: SequenceOfOptionalInt32 where Element == Int32? {}
extension ReversedCollection.Iterator: SequenceOfInt64 where Element == Int64 {}
extension ReversedCollection.Iterator: SequenceOfOptionalInt64 where Element == Int64? {}
extension ReversedCollection.Iterator: SequenceOfInt8 where Element == Int8 {}
extension ReversedCollection.Iterator: SequenceOfOptionalInt8 where Element == Int8? {}
extension ReversedCollection.Iterator: SequenceOfString where Element == String {}
extension ReversedCollection.Iterator: SequenceOfOptionalString where Element == String? {}
extension ReversedCollection.Iterator: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension ReversedCollection.Iterator: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension ReversedCollection.Iterator: SequenceOfSubstring where Element == Substring {}
extension ReversedCollection.Iterator: SequenceOfOptionalSubstring where Element == Substring? {}
extension ReversedCollection.Iterator: SequenceOfUInt where Element == UInt {}
extension ReversedCollection.Iterator: SequenceOfOptionalUInt where Element == UInt? {}
extension ReversedCollection.Iterator: SequenceOfUInt16 where Element == UInt16 {}
extension ReversedCollection.Iterator: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension ReversedCollection.Iterator: SequenceOfUInt32 where Element == UInt32 {}
extension ReversedCollection.Iterator: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension ReversedCollection.Iterator: SequenceOfUInt64 where Element == UInt64 {}
extension ReversedCollection.Iterator: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension ReversedCollection.Iterator: SequenceOfUInt8 where Element == UInt8 {}
extension ReversedCollection.Iterator: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension ReversedCollection.Iterator: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension ReversedCollection.Iterator: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension ReversedCollection.Iterator: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension ReversedCollection.Iterator: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension ReversedCollection.Iterator: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension ReversedCollection.Iterator: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension StrideThrough: SequenceOfDouble where Element == Double {}
extension StrideThrough: SequenceOfFloat where Element == Float {}
#if os(macOS)
extension StrideThrough: SequenceOfFloat80 where Element == Float80 {}
#endif
extension StrideThrough: SequenceOfInt where Element == Int {}
extension StrideThrough: SequenceOfInt16 where Element == Int16 {}
extension StrideThrough: SequenceOfInt32 where Element == Int32 {}
extension StrideThrough: SequenceOfInt64 where Element == Int64 {}
extension StrideThrough: SequenceOfInt8 where Element == Int8 {}
extension StrideThrough: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension StrideThrough: SequenceOfUInt where Element == UInt {}
extension StrideThrough: SequenceOfUInt16 where Element == UInt16 {}
extension StrideThrough: SequenceOfUInt32 where Element == UInt32 {}
extension StrideThrough: SequenceOfUInt64 where Element == UInt64 {}
extension StrideThrough: SequenceOfUInt8 where Element == UInt8 {}
extension StrideThrough: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension StrideThrough: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}

extension StrideTo: SequenceOfDouble where Element == Double {}
extension StrideTo: SequenceOfFloat where Element == Float {}
#if os(macOS)
extension StrideTo: SequenceOfFloat80 where Element == Float80 {}
#endif
extension StrideTo: SequenceOfInt where Element == Int {}
extension StrideTo: SequenceOfInt16 where Element == Int16 {}
extension StrideTo: SequenceOfInt32 where Element == Int32 {}
extension StrideTo: SequenceOfInt64 where Element == Int64 {}
extension StrideTo: SequenceOfInt8 where Element == Int8 {}
extension StrideTo: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension StrideTo: SequenceOfUInt where Element == UInt {}
extension StrideTo: SequenceOfUInt16 where Element == UInt16 {}
extension StrideTo: SequenceOfUInt32 where Element == UInt32 {}
extension StrideTo: SequenceOfUInt64 where Element == UInt64 {}
extension StrideTo: SequenceOfUInt8 where Element == UInt8 {}
extension StrideTo: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension StrideTo: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}

extension UnfoldSequence: SequenceOfBool where Element == Bool {}
extension UnfoldSequence: SequenceOfOptionalBool where Element == Bool? {}
extension UnfoldSequence: SequenceOfCharacter where Element == Character {}
extension UnfoldSequence: SequenceOfOptionalCharacter where Element == Character? {}
extension UnfoldSequence: SequenceOfDouble where Element == Double {}
extension UnfoldSequence: SequenceOfOptionalDouble where Element == Double? {}
extension UnfoldSequence: SequenceOfError where Element == Error {}
extension UnfoldSequence: SequenceOfOptionalError where Element == Error? {}
extension UnfoldSequence: SequenceOfFloat where Element == Float {}
extension UnfoldSequence: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension UnfoldSequence: SequenceOfFloat80 where Element == Float80 {}
extension UnfoldSequence: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension UnfoldSequence: SequenceOfInt where Element == Int {}
extension UnfoldSequence: SequenceOfOptionalInt where Element == Int? {}
extension UnfoldSequence: SequenceOfInt16 where Element == Int16 {}
extension UnfoldSequence: SequenceOfOptionalInt16 where Element == Int16? {}
extension UnfoldSequence: SequenceOfInt32 where Element == Int32 {}
extension UnfoldSequence: SequenceOfOptionalInt32 where Element == Int32? {}
extension UnfoldSequence: SequenceOfInt64 where Element == Int64 {}
extension UnfoldSequence: SequenceOfOptionalInt64 where Element == Int64? {}
extension UnfoldSequence: SequenceOfInt8 where Element == Int8 {}
extension UnfoldSequence: SequenceOfOptionalInt8 where Element == Int8? {}
extension UnfoldSequence: SequenceOfString where Element == String {}
extension UnfoldSequence: SequenceOfOptionalString where Element == String? {}
extension UnfoldSequence: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension UnfoldSequence: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension UnfoldSequence: SequenceOfSubstring where Element == Substring {}
extension UnfoldSequence: SequenceOfOptionalSubstring where Element == Substring? {}
extension UnfoldSequence: SequenceOfUInt where Element == UInt {}
extension UnfoldSequence: SequenceOfOptionalUInt where Element == UInt? {}
extension UnfoldSequence: SequenceOfUInt16 where Element == UInt16 {}
extension UnfoldSequence: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension UnfoldSequence: SequenceOfUInt32 where Element == UInt32 {}
extension UnfoldSequence: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension UnfoldSequence: SequenceOfUInt64 where Element == UInt64 {}
extension UnfoldSequence: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension UnfoldSequence: SequenceOfUInt8 where Element == UInt8 {}
extension UnfoldSequence: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension UnfoldSequence: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension UnfoldSequence: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension UnfoldSequence: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension UnfoldSequence: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension UnfoldSequence: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension UnfoldSequence: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension UnsafeBufferPointer: SequenceOfBool where Element == Bool {}
extension UnsafeBufferPointer: SequenceOfOptionalBool where Element == Bool? {}
extension UnsafeBufferPointer: SequenceOfCharacter where Element == Character {}
extension UnsafeBufferPointer: SequenceOfOptionalCharacter where Element == Character? {}
extension UnsafeBufferPointer: SequenceOfDouble where Element == Double {}
extension UnsafeBufferPointer: SequenceOfOptionalDouble where Element == Double? {}
extension UnsafeBufferPointer: SequenceOfError where Element == Error {}
extension UnsafeBufferPointer: SequenceOfOptionalError where Element == Error? {}
extension UnsafeBufferPointer: SequenceOfFloat where Element == Float {}
extension UnsafeBufferPointer: SequenceOfOptionalFloat where Element == Float? {}
#if os(macOS)
extension UnsafeBufferPointer: SequenceOfFloat80 where Element == Float80 {}
extension UnsafeBufferPointer: SequenceOfOptionalFloat80 where Element == Float80? {}
#endif
extension UnsafeBufferPointer: SequenceOfInt where Element == Int {}
extension UnsafeBufferPointer: SequenceOfOptionalInt where Element == Int? {}
extension UnsafeBufferPointer: SequenceOfInt16 where Element == Int16 {}
extension UnsafeBufferPointer: SequenceOfOptionalInt16 where Element == Int16? {}
extension UnsafeBufferPointer: SequenceOfInt32 where Element == Int32 {}
extension UnsafeBufferPointer: SequenceOfOptionalInt32 where Element == Int32? {}
extension UnsafeBufferPointer: SequenceOfInt64 where Element == Int64 {}
extension UnsafeBufferPointer: SequenceOfOptionalInt64 where Element == Int64? {}
extension UnsafeBufferPointer: SequenceOfInt8 where Element == Int8 {}
extension UnsafeBufferPointer: SequenceOfOptionalInt8 where Element == Int8? {}
extension UnsafeBufferPointer: SequenceOfString where Element == String {}
extension UnsafeBufferPointer: SequenceOfOptionalString where Element == String? {}
extension UnsafeBufferPointer: SequenceOfStringUTF16ViewElement where Element == String.UTF16View.Element {}
extension UnsafeBufferPointer: SequenceOfOptionalStringUTF16ViewElement where Element == String.UTF16View.Element? {}
extension UnsafeBufferPointer: SequenceOfSubstring where Element == Substring {}
extension UnsafeBufferPointer: SequenceOfOptionalSubstring where Element == Substring? {}
extension UnsafeBufferPointer: SequenceOfUInt where Element == UInt {}
extension UnsafeBufferPointer: SequenceOfOptionalUInt where Element == UInt? {}
extension UnsafeBufferPointer: SequenceOfUInt16 where Element == UInt16 {}
extension UnsafeBufferPointer: SequenceOfOptionalUInt16 where Element == UInt16? {}
extension UnsafeBufferPointer: SequenceOfUInt32 where Element == UInt32 {}
extension UnsafeBufferPointer: SequenceOfOptionalUInt32 where Element == UInt32? {}
extension UnsafeBufferPointer: SequenceOfUInt64 where Element == UInt64 {}
extension UnsafeBufferPointer: SequenceOfOptionalUInt64 where Element == UInt64? {}
extension UnsafeBufferPointer: SequenceOfUInt8 where Element == UInt8 {}
extension UnsafeBufferPointer: SequenceOfOptionalUInt8 where Element == UInt8? {}
extension UnsafeBufferPointer: SequenceOfUTF16CodeUnit where Element == UTF16.CodeUnit {}
extension UnsafeBufferPointer: SequenceOfOptionalUTF16CodeUnit where Element == UTF16.CodeUnit? {}
extension UnsafeBufferPointer: SequenceOfUTF8CodeUnit where Element == UTF8.CodeUnit {}
extension UnsafeBufferPointer: SequenceOfOptionalUTF8CodeUnit where Element == UTF8.CodeUnit? {}
extension UnsafeBufferPointer: SequenceOfUnicodeScalar where Element == Unicode.Scalar {}
extension UnsafeBufferPointer: SequenceOfOptionalUnicodeScalar where Element == Unicode.Scalar? {}

extension UnsafeMutableRawBufferPointer.Iterator: SequenceOfUInt8 {}
